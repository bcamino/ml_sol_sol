Lmod has detected the following error: The following module(s) are unknown:
"epcc-job-env"

Please check the spelling or version number. Also try "module spider ..."
It is also possible your cache file is out-of-date; it may help to try:
  $ module --ignore-cache load "epcc-job-env"

Also make sure that all modulefiles written in TCL start with the string
#%Module




Warning: You have enabled access to software packages installed
by external parties on ARCHER2 or those that are not fully-supported.
The ARCHER2 CSE service does not test these packages. The service desk
will make reasonable efforts to assist with questions on the use of
these packages but some issues may not be able to be resolved by the
service and they may direct you to seek help from external parties.


printed output filename CaMgO_full_tmp_550.out
printed output filename CaMgO_full_tmp_663.out
printed output filename CaMgO_full_tmp_753.out
printed output filename CaMgO_full_tmp_562.out
printed output filename CaMgO_full_tmp_555.out
printed output filename CaMgO_full_tmp_549.out
printed output filename CaMgO_full_tmp_532.out
printed output filename CaMgO_full_tmp_652.out
printed output filename CaMgO_full_tmp_740.out
printed output filename CaMgO_full_tmp_638.out
printed output filename CaMgO_full_tmp_580.out
printed output filename CaMgO_full_tmp_553.out
printed output filename CaMgO_full_tmp_725.out
printed output filename CaMgO_full_tmp_714.out
printed output filename CaMgO_full_tmp_750.out
printed output filename CaMgO_full_tmp_632.out
printed output filename CaMgO_full_tmp_621.out
printed output filename CaMgO_full_tmp_613.out
printed output filename CaMgO_full_tmp_719.out
printed output filename CaMgO_full_tmp_617.out
printed output filename CaMgO_full_tmp_622.out
printed output filename CaMgO_full_tmp_745.out
printed output filename CaMgO_full_tmp_588.out
printed output filename CaMgO_full_tmp_701.out
printed output filename CaMgO_full_tmp_656.out
printed output filename CaMgO_full_tmp_611.out
printed output filename CaMgO_full_tmp_548.out
printed output filename CaMgO_full_tmp_736.out
printed output filename CaMgO_full_tmp_755.out
printed output filename CaMgO_full_tmp_606.out
printed output filename CaMgO_full_tmp_688.out
printed output filename CaMgO_full_tmp_711.out
printed output filename CaMgO_full_tmp_584.out
printed output filename CaMgO_full_tmp_654.out
printed output filename CaMgO_full_tmp_596.out
printed output filename CaMgO_full_tmp_547.out
printed output filename CaMgO_full_tmp_530.out
printed output filename CaMgO_full_tmp_537.out
printed output filename CaMgO_full_tmp_642.out
printed output filename CaMgO_full_tmp_686.out
printed output filename CaMgO_full_tmp_639.out
printed output filename CaMgO_full_tmp_703.out
printed output filename CaMgO_full_tmp_645.out
printed output filename CaMgO_full_tmp_741.out
printed output filename CaMgO_full_tmp_742.out
printed output filename CaMgO_full_tmp_682.out
printed output filename CaMgO_full_tmp_653.out
printed output filename CaMgO_full_tmp_593.out
printed output filename CaMgO_full_tmp_560.out
printed output filename CaMgO_full_tmp_641.out
printed output filename CaMgO_full_tmp_571.out
printed output filename CaMgO_full_tmp_551.out
printed output filename CaMgO_full_tmp_658.out
printed output filename CaMgO_full_tmp_566.out
printed output filename CaMgO_full_tmp_660.out
printed output filename CaMgO_full_tmp_720.out
printed output filename CaMgO_full_tmp_668.out
printed output filename CaMgO_full_tmp_533.out
printed output filename CaMgO_full_tmp_691.out
printed output filename CaMgO_full_tmp_544.out
printed output filename CaMgO_full_tmp_704.out
printed output filename CaMgO_full_tmp_618.out
printed output filename CaMgO_full_tmp_583.out
printed output filename CaMgO_full_tmp_598.out
printed output filename CaMgO_full_tmp_674.out
printed output filename CaMgO_full_tmp_651.out
printed output filename CaMgO_full_tmp_635.out
printed output filename CaMgO_full_tmp_536.out
printed output filename CaMgO_full_tmp_540.out
printed output filename CaMgO_full_tmp_675.out
printed output filename CaMgO_full_tmp_718.out
printed output filename CaMgO_full_tmp_582.out
printed output filename CaMgO_full_tmp_687.out
printed output filename CaMgO_full_tmp_629.out
printed output filename CaMgO_full_tmp_534.out
printed output filename CaMgO_full_tmp_577.out
printed output filename CaMgO_full_tmp_647.out
printed output filename CaMgO_full_tmp_572.out
printed output filename CaMgO_full_tmp_727.out
printed output filename CaMgO_full_tmp_754.out
printed output filename CaMgO_full_tmp_542.out
printed output filename CaMgO_full_tmp_698.out
printed output filename CaMgO_full_tmp_723.out
printed output filename CaMgO_full_tmp_557.out
printed output filename CaMgO_full_tmp_747.out
printed output filename CaMgO_full_tmp_731.out
printed output filename CaMgO_full_tmp_529.out
printed output filename CaMgO_full_tmp_681.out
printed output filename CaMgO_full_tmp_585.out
printed output filename CaMgO_full_tmp_650.out
printed output filename CaMgO_full_tmp_743.out
printed output filename CaMgO_full_tmp_757.out
printed output filename CaMgO_full_tmp_694.out
printed output filename CaMgO_full_tmp_624.out
printed output filename CaMgO_full_tmp_633.out
printed output filename CaMgO_full_tmp_706.out
printed output filename CaMgO_full_tmp_552.out
printed output filename CaMgO_full_tmp_646.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_
</script>
DATE START:<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_
Mon Feb  6 09:37:16 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_
Mon Feb  6 09:37:16 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.out
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.out
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.out
<script>
</script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.out
<script>
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_629_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_
<script>
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:DATE START:Mon Feb  6 09:37:16 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.out
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.out
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_
</script>
DATE START:</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_
DATE START:</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_
<script>
<script>
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.out
DATE START:<script>
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_
Mon Feb  6 09:37:16 GMT 2023
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_
<script>
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_
DATE START:</script>
DATE START:</script>
DATE START:<script>
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_
<script>
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.out
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_
</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.out
</script>
DATE START:</script>
<script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.out
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.out
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
<script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
<script>
</script>
<script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_
DATE START:</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_
Mon Feb  6 09:37:16 GMT 2023
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
DATE START:</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
</script>
Mon Feb  6 09:37:16 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:</script>
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
DATE START:<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.out
printed output filename CaMgO_full_tmp_735.out
<script>
Mon Feb  6 09:37:16 GMT 2023
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_
<script>
<script>
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.out
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
Mon Feb  6 09:37:16 GMT 2023
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.out
</script>
DATE START:</script>
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_
DATE START:DATE START:</script>
DATE START:</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.out
Mon Feb  6 09:37:16 GMT 2023
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.out
<script>
printed output filename CaMgO_full_tmp_713.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
Mon Feb  6 09:37:16 GMT 2023
DATE START:DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.out
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
</script>
DATE START:</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
</script>
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
</script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
DATE START:</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
DATE START:<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.out
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.out
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.out
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.out
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.out
</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_
Mon Feb  6 09:37:16 GMT 2023
</script>
Mon Feb  6 09:37:16 GMT 2023
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Mon Feb  6 09:37:16 GMT 2023
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.out
Mon Feb  6 09:37:16 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.out
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.out
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.out
Mon Feb  6 09:37:16 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.out
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.out
</script>
</script>
<script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.out
DATE START:Mon Feb  6 09:37:16 GMT 2023
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.out
</script>
DATE START:<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.out
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.out
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.out
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.out
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.out
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_
</script>
</script>
DATE START:Mon Feb  6 09:37:16 GMT 2023
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_
Mon Feb  6 09:37:16 GMT 2023
<script>
Mon Feb  6 09:37:16 GMT 2023
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.out
Mon Feb  6 09:37:16 GMT 2023
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.out
Mon Feb  6 09:37:16 GMT 2023
<script>
Mon Feb  6 09:37:16 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_
Mon Feb  6 09:37:16 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_
Mon Feb  6 09:37:16 GMT 2023
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_629_
Mon Feb  6 09:37:16 GMT 2023
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.out
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_
Mon Feb  6 09:37:16 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.d12
input CaMgO_full_tmp_583.d12 copied.
input CaMgO_full_tmp_642.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_
input CaMgO_full_tmp_548.d12 copied.
input CaMgO_full_tmp_714.d12 copied.
input CaMgO_full_tmp_656.d12 copied.
input CaMgO_full_tmp_703.d12 copied.
input CaMgO_full_tmp_653.d12 copied.
input CaMgO_full_tmp_646.d12 copied.
input CaMgO_full_tmp_704.d12 copied.
input CaMgO_full_tmp_658.d12 copied.
input CaMgO_full_tmp_725.d12 copied.
input CaMgO_full_tmp_652.d12 copied.
input CaMgO_full_tmp_747.d12 copied.
input CaMgO_full_tmp_555.d12 copied.
input CaMgO_full_tmp_719.d12 copied.
input CaMgO_full_tmp_750.d12 copied.
input CaMgO_full_tmp_740.d12 copied.
input CaMgO_full_tmp_571.d12 copied.
input CaMgO_full_tmp_731.d12 copied.
input CaMgO_full_tmp_647.d12 copied.
input CaMgO_full_tmp_557.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.d12
input CaMgO_full_tmp_741.d12 copied.
input CaMgO_full_tmp_553.d12 copied.
input CaMgO_full_tmp_617.d12 copied.
input CaMgO_full_tmp_560.d12 copied.
input CaMgO_full_tmp_753.d12 copied.
input CaMgO_full_tmp_736.d12 copied.
input CaMgO_full_tmp_622.d12 copied.
input CaMgO_full_tmp_663.d12 copied.
input CaMgO_full_tmp_745.d12 copied.
input CaMgO_full_tmp_544.d12 copied.
input CaMgO_full_tmp_691.d12 copied.
input CaMgO_full_tmp_633.d12 copied.
input CaMgO_full_tmp_534.d12 copied.
input CaMgO_full_tmp_675.d12 copied.
input CaMgO_full_tmp_706.d12 copied.
input CaMgO_full_tmp_742.d12 copied.
input CaMgO_full_tmp_629.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.d12
input CaMgO_full_tmp_674.d12 copied.
input CaMgO_full_tmp_530.d12 copied.
input CaMgO_full_tmp_720.d12 copied.
input CaMgO_full_tmp_585.d12 copied.
input CaMgO_full_tmp_632.d12 copied.
input CaMgO_full_tmp_552.d12 copied.
input CaMgO_full_tmp_681.d12 copied.
input CaMgO_full_tmp_536.d12 copied.
input CaMgO_full_tmp_639.d12 copied.
input CaMgO_full_tmp_754.d12 copied.
input CaMgO_full_tmp_682.d12 copied.
input CaMgO_full_tmp_723.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_
input CaMgO_full_tmp_711.d12 copied.
input CaMgO_full_tmp_650.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.d12
input CaMgO_full_tmp_550.d12 copied.
input CaMgO_full_tmp_540.d12 copied.
input CaMgO_full_tmp_566.d12 copied.
input CaMgO_full_tmp_572.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.d3 not found or empty.
input CaMgO_full_tmp_638.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.d3 not found or empty.
input CaMgO_full_tmp_755.d12 copied.
input CaMgO_full_tmp_624.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.d3 not found or empty.
input CaMgO_full_tmp_698.d12 copied.
input CaMgO_full_tmp_542.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.d3 not found or empty.
input CaMgO_full_tmp_611.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.d3 not found or empty.
input CaMgO_full_tmp_577.d12 copied.
input CaMgO_full_tmp_584.d12 copied.
input CaMgO_full_tmp_660.d12 copied.
input CaMgO_full_tmp_645.d12 copied.
input CaMgO_full_tmp_532.d12 copied.
input CaMgO_full_tmp_529.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.d3 not found or empty.
input CaMgO_full_tmp_606.d12 copied.
input CaMgO_full_tmp_743.d12 copied.
input CaMgO_full_tmp_641.d12 copied.
input CaMgO_full_tmp_549.d12 copied.
input CaMgO_full_tmp_651.d12 copied.
input CaMgO_full_tmp_551.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.d3 not found or empty.
input CaMgO_full_tmp_613.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.d3 not found or empty.
input CaMgO_full_tmp_593.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.d3 not found or empty.
input CaMgO_full_tmp_635.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.d3 not found or empty.
input CaMgO_full_tmp_694.d12 copied.
input CaMgO_full_tmp_533.d12 copied.
input CaMgO_full_tmp_688.d12 copied.
input CaMgO_full_tmp_618.d12 copied.
input CaMgO_full_tmp_668.d12 copied.
input CaMgO_full_tmp_596.d12 copied.
input CaMgO_full_tmp_547.d12 copied.
input CaMgO_full_tmp_582.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.d3 not found or empty.
input CaMgO_full_tmp_687.d12 copied.
input CaMgO_full_tmp_598.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.d3 not found or empty.
input CaMgO_full_tmp_718.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.d3 not found or empty.
input CaMgO_full_tmp_686.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.d3 not found or empty.
input CaMgO_full_tmp_701.d12 copied.
input CaMgO_full_tmp_562.d12 copied.
input CaMgO_full_tmp_537.d12 copied.
input CaMgO_full_tmp_588.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.d3 not found or empty.
input CaMgO_full_tmp_654.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.d3 not found or empty.
input CaMgO_full_tmp_757.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.d3 not found or empty.
input CaMgO_full_tmp_621.d12 copied.
input CaMgO_full_tmp_735.d12 copied.
input CaMgO_full_tmp_727.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.gui
input CaMgO_full_tmp_713.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.gui
input CaMgO_full_tmp_656.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.gui
input CaMgO_full_tmp_580.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.gui
input CaMgO_full_tmp_617.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.gui
input CaMgO_full_tmp_653.gui copied.
input CaMgO_full_tmp_703.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.gui
input CaMgO_full_tmp_583.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.gui
input CaMgO_full_tmp_731.gui copied.
input CaMgO_full_tmp_714.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.gui
input CaMgO_full_tmp_719.gui copied.
input CaMgO_full_tmp_633.gui copied.
input CaMgO_full_tmp_658.gui copied.
input CaMgO_full_tmp_750.gui copied.
input CaMgO_full_tmp_706.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.gui
input CaMgO_full_tmp_753.gui copied.
input CaMgO_full_tmp_663.gui copied.
input CaMgO_full_tmp_536.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.gui
input CaMgO_full_tmp_740.gui copied.
input CaMgO_full_tmp_534.gui copied.
input CaMgO_full_tmp_571.gui copied.
input CaMgO_full_tmp_585.gui copied.
input CaMgO_full_tmp_530.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.gui
input CaMgO_full_tmp_745.gui copied.
input CaMgO_full_tmp_742.gui copied.
input CaMgO_full_tmp_675.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.gui
input CaMgO_full_tmp_566.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.gui
input CaMgO_full_tmp_639.gui copied.
input CaMgO_full_tmp_691.gui copied.
input CaMgO_full_tmp_572.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.d3 not found or empty.
input CaMgO_full_tmp_720.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.gui
input CaMgO_full_tmp_754.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.gui
input CaMgO_full_tmp_682.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.gui
input CaMgO_full_tmp_624.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.gui
input CaMgO_full_tmp_552.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.gui
input CaMgO_full_tmp_638.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.gui
input CaMgO_full_tmp_723.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.gui
input CaMgO_full_tmp_755.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.gui
input CaMgO_full_tmp_629.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.gui
input CaMgO_full_tmp_698.gui copied.
input CaMgO_full_tmp_548.gui copied.
input CaMgO_full_tmp_741.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.POINTCHG not found or empty.
input CaMgO_full_tmp_694.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.POINTCHG not found or empty.
input CaMgO_full_tmp_550.gui copied.
input CaMgO_full_tmp_622.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.POINTCHG not found or empty.
input CaMgO_full_tmp_651.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.gui
input CaMgO_full_tmp_645.gui copied.
input CaMgO_full_tmp_547.gui copied.
input CaMgO_full_tmp_532.gui copied.
input CaMgO_full_tmp_618.gui copied.
input CaMgO_full_tmp_560.gui copied.
input CaMgO_full_tmp_725.gui copied.
input CaMgO_full_tmp_747.gui copied.
input CaMgO_full_tmp_542.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.POINTCHG not found or empty.
input CaMgO_full_tmp_736.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.POINTCHG not found or empty.
input CaMgO_full_tmp_647.gui copied.
input CaMgO_full_tmp_577.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.POINTCHG not found or empty.
input CaMgO_full_tmp_635.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.POINTCHG not found or empty.
input CaMgO_full_tmp_598.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.POINTCHG not found or empty.
input CaMgO_full_tmp_654.gui copied.
input CaMgO_full_tmp_660.gui copied.
input CaMgO_full_tmp_757.gui copied.
input CaMgO_full_tmp_613.gui copied.
input CaMgO_full_tmp_641.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.POINTCHG not found or empty.
input CaMgO_full_tmp_596.gui copied.
input CaMgO_full_tmp_701.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.POINTCHG not found or empty.
input CaMgO_full_tmp_735.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.POINTCHG not found or empty.
input CaMgO_full_tmp_553.gui copied.
input CaMgO_full_tmp_584.gui copied.
input CaMgO_full_tmp_718.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.POINTCHG not found or empty.
input CaMgO_full_tmp_646.gui copied.
input CaMgO_full_tmp_704.gui copied.
input CaMgO_full_tmp_540.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.POINTCHG not found or empty.
input CaMgO_full_tmp_674.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.POINTCHG not found or empty.
input CaMgO_full_tmp_686.gui copied.
input CaMgO_full_tmp_549.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.gui
input CaMgO_full_tmp_529.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.POINTCHG not found or empty.
input CaMgO_full_tmp_557.gui copied.
input CaMgO_full_tmp_588.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.POINTCHG not found or empty.
input CaMgO_full_tmp_533.gui copied.
input CaMgO_full_tmp_681.gui copied.
input CaMgO_full_tmp_652.gui copied.
input CaMgO_full_tmp_711.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.POINTCHG not found or empty.
input CaMgO_full_tmp_668.gui copied.
input CaMgO_full_tmp_688.gui copied.
input CaMgO_full_tmp_713.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.POINTCHG not found or empty.
input CaMgO_full_tmp_544.gui copied.
input CaMgO_full_tmp_650.gui copied.
input CaMgO_full_tmp_632.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.POINTCHG not found or empty.
input CaMgO_full_tmp_555.gui copied.
input CaMgO_full_tmp_642.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.POINTCHG not found or empty.
input CaMgO_full_tmp_537.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.POINTCHG not found or empty.
input CaMgO_full_tmp_621.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.POINTCHG not found or empty.
input CaMgO_full_tmp_606.gui copied.
input CaMgO_full_tmp_580.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.POINTCHG not found or empty.
input CaMgO_full_tmp_743.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.POINTCHG not found or empty.
input CaMgO_full_tmp_593.gui copied.
input CaMgO_full_tmp_611.gui copied.
input CaMgO_full_tmp_551.gui copied.
input CaMgO_full_tmp_562.gui copied.
input CaMgO_full_tmp_582.gui copied.
input CaMgO_full_tmp_727.gui copied.
input CaMgO_full_tmp_687.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.POINTCHG not found or empty.
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_580.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_547.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_550.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_529.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_533.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_537.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.ERROR
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.gui
#!/bin/bash
JOBNAME=CaMgO_full_tmp_580
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_580.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_580_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.ERROR
mv: File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_641.xyz
cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_653.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.ERROR
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_651.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.ERROR
#!/bin/bash
JOBNAME=CaMgO_full_tmp_550
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_550.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_550_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

nid001061
<checkfile0>
</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_547
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_547.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_547_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directoryFile saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.ERROR

File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_645.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_529
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_529.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_529_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_577.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_624.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_536.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_583.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_560.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_682.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_629_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.ERROR
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_703
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_703.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_742
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_742.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_533
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_533.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_533_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_629_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_629.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_537
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_537.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_537_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_641
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_641.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_641_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_743
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_743.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.ERROR
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_653
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_653.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_653_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_706
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_706.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_651
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_651.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_651_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out'mv: : No such file or directorycannot stat 'slurm-.out'
: No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_645
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_645.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_645_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.ERROR
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_577
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_577.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_577_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_624
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_624.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_624_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.ERROR
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_725
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_725.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
mv: #!/bin/bash
JOBNAME=CaMgO_full_tmp_583
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_583.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_583_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

cannot stat 'slurm-.out': No such file or directory
</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_536
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_536.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_536_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.gui
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_682
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_682.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_682_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_560
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_560.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_560_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_593.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_727
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_727.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_629
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_629.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_629_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_629_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_571.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_566.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_596.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_656.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_532.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_663.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_606.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_562.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_548.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_598.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.gui
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_691.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_593
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_593.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_593_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.ERROR
</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_674.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_675.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_686.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_639.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_617.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_588.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_572.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_544.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_642.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_635.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_542.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_719
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_719.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.gui
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_530.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_711
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_711.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_650.xyz
mv: cannot stat 'slurm-.out'File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_557.xyz
: No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_618.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_571
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_571.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_571_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out'File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.gui
: No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_668.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_566
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_566.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_566_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_613.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_681.xyz
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.gui
#!/bin/bash
JOBNAME=CaMgO_full_tmp_745
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_745.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_551.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_596
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_596.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_596_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
nid001061
<checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_656
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_656.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_656_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

nid001061
</checkfile0>
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_663
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_663.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_663_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_757
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_757.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#!/bin/bash
JOBNAME=CaMgO_full_tmp_532
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_532.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_532_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out'mv: cannot stat 'slurm-.out': No such file or directory
: No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_548
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_548.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_548_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_606
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_606.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_606_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.ERROR
nid001061
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.ERROR
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.ERROR
#!/bin/bash
JOBNAME=CaMgO_full_tmp_598
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_598.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_598_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.ERROR
</checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_740
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_740.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

nid001061
</checkfile0>
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_562
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_562.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_562_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
mv: <checkfile0>
cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_585.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.ERROR
#!/bin/bash
JOBNAME=CaMgO_full_tmp_691
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_691.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_691_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.gui
#!/bin/bash
JOBNAME=CaMgO_full_tmp_686
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_686.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_686_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.gui
nid001061
<checkfile0>
mv: cannot stat 'slurm-.out'File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.gui
: No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.gui
#!/bin/bash
JOBNAME=CaMgO_full_tmp_674
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_674.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_674_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.gui
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_675
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_675.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_675_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_638.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_698.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_552.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_553.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.gui
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_688.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_639
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_639.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_639_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.xyz
mv: cannot stat 'slurm-.out'File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.ERROR
: No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_747
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_747.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out'File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_660.xyz
: No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_617
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_617.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_617_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
nid001061
<checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_588
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_588.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_588_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_720
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_720.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out'#!/bin/bash
JOBNAME=CaMgO_full_tmp_572
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_572.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_572_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
: No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.xyz
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.gui
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.gui
#!/bin/bash
JOBNAME=CaMgO_full_tmp_544
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_544.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_544_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.ERROR
</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.gui
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_642
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_642.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_642_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_542
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_542.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_542_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.ERROR
#!/bin/bash
JOBNAME=CaMgO_full_tmp_635
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_635.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_635_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_540.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.ERROR
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_654.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_557
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_557.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_557_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.gui
#!/bin/bash
JOBNAME=CaMgO_full_tmp_618
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_618.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_618_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.gui
</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_633.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_549.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.gui
nid001061
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_530
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_530.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_530_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_668
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_668.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_668_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

mv: cannot stat 'slurm-.out'</checkfile0>
: No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.xyz
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_650
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_650.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_650_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_646.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_731
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_731.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_694.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.ERROR
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_613
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_613.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_613_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_681
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_681.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_681_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directorynid001061

<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_658.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.ERROR
#!/bin/bash
JOBNAME=CaMgO_full_tmp_736
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_736.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_687.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_611.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_704
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_704.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_555.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_622.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_632.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_551
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_551.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_551_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.ERROR
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_585
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_585.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_585_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.gui
nid001061
nid001061
<checkfile0>
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_718
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_718.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#!/bin/bash
JOBNAME=CaMgO_full_tmp_698
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_698.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_698_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directorymv: 
nid001061
cannot stat 'slurm-.out': No such file or directory
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_754
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_754.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
mv: cannot stat 'slurm-.out'nid001061
#!/bin/bash
JOBNAME=CaMgO_full_tmp_638
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_638.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_638_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

: No such file or directory
<checkfile0>
</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_688
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_688.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_688_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_723
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_723.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_553
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_553.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_553_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_660
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_660.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_660_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
nid001061
<checkfile0>
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_750
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_750.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#!/bin/bash
JOBNAME=CaMgO_full_tmp_735
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_735.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
</checkfile0>
mv: mv: cannot stat 'slurm-.out'cannot stat 'slurm-.out': No such file or directory: No such file or directory

File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_652.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_713
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_713.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_540
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_540.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_540_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_621.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_701
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_701.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_549
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_549.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_549_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_654
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_654.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_654_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

nid001061
</checkfile0>
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_714
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_714.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

mv: cannot stat 'slurm-.out'</checkfile0>
: No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_633
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_633.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_633_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

mv: cannot stat 'slurm-.out': No such file or directory
</checkfile0>
nid001061
nid001061
<checkfile0>
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_552
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_552.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_552_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#!/bin/bash
JOBNAME=CaMgO_full_tmp_753
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_753.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
</checkfile0>
mv: mv: cannot stat 'slurm-.out'cannot stat 'slurm-.out': No such file or directory: No such file or directory

nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_741
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_741.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
nid001061
<checkfile0>
<checkfile0>
mv: #!/bin/bash
JOBNAME=CaMgO_full_tmp_694
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_694.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_694_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_646
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_646.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_646_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_658
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_658.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_658_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_687
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_687.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_687_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_611
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_611.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_611_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_755
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_755.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_555
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_555.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_555_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001061
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_622
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_622.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_622_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_534.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_632
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_632.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_632_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.ERROR
nid001061
<checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_582.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_652
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_652.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_652_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_584.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.gui
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_621
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_621.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_621_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_647.xyz
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_534
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_534.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_534_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_582
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_582.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_582_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_584
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_584.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_584_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001061
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_647
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_647.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_647_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_529.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_530.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_532.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_533.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_534.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_536.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_537.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_540.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_542.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_544.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_547.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_548.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_549.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_550.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_551.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_552.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_553.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_555.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_557.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_560.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_562.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_566.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_571.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_572.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_577.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_580.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_582.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_583.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_584.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_585.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_588.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_593.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_596.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_598.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_606.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_611.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_613.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_617.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_618.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_621.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_622.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_624.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_629.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_632.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_633.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_635.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_638.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_639.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_641.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_642.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_645.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_646.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_647.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_650.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_651.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_652.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_653.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_654.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_656.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_658.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_660.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_663.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_668.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_674.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_675.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_681.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_682.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_686.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_687.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_688.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_691.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_694.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_698.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_701.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_703.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_704.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_706.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_711.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_713.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_714.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_718.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_719.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_720.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_723.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_725.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_727.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_731.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_735.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_736.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_740.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_741.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_742.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_743.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_745.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_747.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_750.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_753.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_754.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_755.f9': No such file or directory
mv: cannot stat 'CaMgO_full_tmp_757.f9': No such file or directory
