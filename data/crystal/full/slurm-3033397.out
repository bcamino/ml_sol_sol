Lmod has detected the following error: The following module(s) are unknown:
"epcc-job-env"

Please check the spelling or version number. Also try "module spider ..."
It is also possible your cache file is out-of-date; it may help to try:
  $ module --ignore-cache load "epcc-job-env"

Also make sure that all modulefiles written in TCL start with the string
#%Module




Warning: You have enabled access to software packages installed
by external parties on ARCHER2 or those that are not fully-supported.
The ARCHER2 CSE service does not test these packages. The service desk
will make reasonable efforts to assist with questions on the use of
these packages but some issues may not be able to be resolved by the
service and they may direct you to seek help from external parties.


printed output filename CaMgO_full_tmp_2334.out
printed output filename CaMgO_full_tmp_2353.out
printed output filename CaMgO_full_tmp_2323.out
printed output filename CaMgO_full_tmp_2340.out
printed output filename CaMgO_full_tmp_2384.out
printed output filename CaMgO_full_tmp_2330.out
printed output filename CaMgO_full_tmp_2369.out
printed output filename CaMgO_full_tmp_2387.out
printed output filename CaMgO_full_tmp_2325.out
printed output filename CaMgO_full_tmp_2388.out
printed output filename CaMgO_full_tmp_2367.out
printed output filename CaMgO_full_tmp_2355.out
printed output filename CaMgO_full_tmp_2312.out
printed output filename CaMgO_full_tmp_2342.out
printed output filename CaMgO_full_tmp_2301.out
printed output filename CaMgO_full_tmp_2314.out
printed output filename CaMgO_full_tmp_2315.out
printed output filename CaMgO_full_tmp_2366.out
printed output filename CaMgO_full_tmp_2386.out
printed output filename CaMgO_full_tmp_2320.out
printed output filename CaMgO_full_tmp_2337.out
printed output filename CaMgO_full_tmp_2326.out
printed output filename CaMgO_full_tmp_2350.out
printed output filename CaMgO_full_tmp_2322.out
printed output filename CaMgO_full_tmp_2305.out
printed output filename CaMgO_full_tmp_2318.out
printed output filename CaMgO_full_tmp_2364.out
printed output filename CaMgO_full_tmp_2328.out
printed output filename CaMgO_full_tmp_2321.out
printed output filename CaMgO_full_tmp_2302.out
printed output filename CaMgO_full_tmp_2396.out
printed output filename CaMgO_full_tmp_2309.out
printed output filename CaMgO_full_tmp_2389.out
printed output filename CaMgO_full_tmp_2313.out
printed output filename CaMgO_full_tmp_2390.out
printed output filename CaMgO_full_tmp_2363.out
printed output filename CaMgO_full_tmp_2394.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.out
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_
<script>
</script>
</script>
<script>
DATE START:DATE START:<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_
<script>
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
</script>
DATE START:DATE START:DATE START:</script>
</script>
</script>
DATE START:DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.out
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_
</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
</script>
DATE START:Mon Feb  6 01:18:24 GMT 2023
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.out
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.out
<script>
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.out
printed output filename CaMgO_full_tmp_2382.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_2375.out
printed output filename CaMgO_full_tmp_2376.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:</script>
DATE START:DATE START:printed output filename CaMgO_full_tmp_2348.out
printed output filename CaMgO_full_tmp_2365.out
printed output filename CaMgO_full_tmp_2306.out
printed output filename CaMgO_full_tmp_2352.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
printed output filename CaMgO_full_tmp_2372.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.out
printed output filename CaMgO_full_tmp_2385.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.out
Mon Feb  6 01:18:24 GMT 2023
printed output filename CaMgO_full_tmp_2368.out
printed output filename CaMgO_full_tmp_2393.out
printed output filename CaMgO_full_tmp_2316.out
printed output filename CaMgO_full_tmp_2339.out
printed output filename CaMgO_full_tmp_2345.out
printed output filename CaMgO_full_tmp_2300.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_2333.out
printed output filename CaMgO_full_tmp_2303.out
printed output filename CaMgO_full_tmp_2338.out
printed output filename CaMgO_full_tmp_2346.out
printed output filename CaMgO_full_tmp_2319.out
printed output filename CaMgO_full_tmp_2356.out
printed output filename CaMgO_full_tmp_2331.out
printed output filename CaMgO_full_tmp_2362.out
printed output filename CaMgO_full_tmp_2397.out
printed output filename CaMgO_full_tmp_2310.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_2317.out
printed output filename CaMgO_full_tmp_2311.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_2347.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_2359.out
printed output filename CaMgO_full_tmp_2361.out
printed output filename CaMgO_full_tmp_2327.out
printed output filename CaMgO_full_tmp_2381.out
printed output filename CaMgO_full_tmp_2308.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_
printed output filename CaMgO_full_tmp_2349.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_
printed output filename CaMgO_full_tmp_2336.out
printed output filename CaMgO_full_tmp_2351.out
printed output filename CaMgO_full_tmp_2329.out
printed output filename CaMgO_full_tmp_2398.out
printed output filename CaMgO_full_tmp_2399.out
printed output filename CaMgO_full_tmp_2332.out
printed output filename CaMgO_full_tmp_2354.out
printed output filename CaMgO_full_tmp_2371.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_
printed output filename CaMgO_full_tmp_2360.out
printed output filename CaMgO_full_tmp_2324.out
printed output filename CaMgO_full_tmp_2344.out
printed output filename CaMgO_full_tmp_2392.out
printed output filename CaMgO_full_tmp_2395.out
printed output filename CaMgO_full_tmp_2370.out
printed output filename CaMgO_full_tmp_2343.out
printed output filename CaMgO_full_tmp_2341.out
printed output filename CaMgO_full_tmp_2378.out
printed output filename CaMgO_full_tmp_2358.out
printed output filename CaMgO_full_tmp_2307.out
printed output filename CaMgO_full_tmp_2304.out
printed output filename CaMgO_full_tmp_2380.out
printed output filename CaMgO_full_tmp_2391.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_
printed output filename CaMgO_full_tmp_2383.out
printed output filename CaMgO_full_tmp_2335.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_
printed output filename CaMgO_full_tmp_2374.out
printed output filename CaMgO_full_tmp_2373.out
printed output filename CaMgO_full_tmp_2377.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_
printed output filename CaMgO_full_tmp_2357.out
printed output filename CaMgO_full_tmp_2379.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_
<script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
DATE START:<script>
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_
<script>
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_
</script>
DATE START:Mon Feb  6 01:18:24 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_
Mon Feb  6 01:18:24 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_
</script>
</script>
DATE START:DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.out
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.out
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.out
</script>
DATE START:</script>
DATE START:</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_
</script>
DATE START:</script>
DATE START:</script>
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_
DATE START:Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_
<script>
<script>
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_
</script>
DATE START:<script>
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.out
Mon Feb  6 01:18:24 GMT 2023
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.out
DATE START:DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.out
<script>
<script>
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.out
</script>
</script>
DATE START:DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_
<script>
<script>
<script>
<script>
<script>
<script>
<script>
<script>
<script>
<script>
<script>
Mon Feb  6 01:18:24 GMT 2023
<script>
<script>
<script>
<script>
<script>
Mon Feb  6 01:18:24 GMT 2023
<script>
<script>
<script>
<script>
<script>
<script>
Mon Feb  6 01:18:24 GMT 2023
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.out
</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.out
</script>
DATE START:</script>
DATE START:</script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_
DATE START:Mon Feb  6 01:18:24 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Mon Feb  6 01:18:24 GMT 2023
</script>
DATE START:Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.out
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.out
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
</script>
</script>
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:DATE START:</script>
DATE START:</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.out
DATE START:DATE START:</script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.out
</script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:</script>
<script>
DATE START:</script>
</script>
DATE START:DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_
Mon Feb  6 01:18:24 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_
</script>
DATE START:Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.d12
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.d12
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.d12
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.out
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.out
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.out
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.d12
Mon Feb  6 01:18:24 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_
input CaMgO_full_tmp_2301.d12 copied.
input CaMgO_full_tmp_2369.d12 copied.
input CaMgO_full_tmp_2313.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_
input CaMgO_full_tmp_2320.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.d12
input CaMgO_full_tmp_2342.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_
input CaMgO_full_tmp_2305.d12 copied.
input CaMgO_full_tmp_2325.d12 copied.
input CaMgO_full_tmp_2322.d12 copied.
<script>
input CaMgO_full_tmp_2334.d12 copied.
input CaMgO_full_tmp_2314.d12 copied.
input CaMgO_full_tmp_2390.d12 copied.
input CaMgO_full_tmp_2323.d12 copied.
<script>
input CaMgO_full_tmp_2318.d12 copied.
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_
input CaMgO_full_tmp_2367.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_
input CaMgO_full_tmp_2326.d12 copied.
input CaMgO_full_tmp_2328.d12 copied.
input CaMgO_full_tmp_2337.d12 copied.
<script>
input CaMgO_full_tmp_2394.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.d12
input CaMgO_full_tmp_2366.d12 copied.
input CaMgO_full_tmp_2388.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_
input CaMgO_full_tmp_2312.d12 copied.
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.d12
</script>
DATE START:input CaMgO_full_tmp_2315.d12 copied.
input CaMgO_full_tmp_2387.d12 copied.
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.d12
</script>
DATE START:</script>
DATE START:input CaMgO_full_tmp_2340.d12 copied.
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_
input CaMgO_full_tmp_2309.d12 copied.
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_
</script>
input CaMgO_full_tmp_2353.d12 copied.
DATE START:input CaMgO_full_tmp_2389.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_
input CaMgO_full_tmp_2302.d12 copied.
input CaMgO_full_tmp_2350.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_
input CaMgO_full_tmp_2363.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_
input CaMgO_full_tmp_2330.d12 copied.
input CaMgO_full_tmp_2316.d12 copied.
Mon Feb  6 01:18:24 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_
Mon Feb  6 01:18:24 GMT 2023
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_
Mon Feb  6 01:18:24 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.d12
Mon Feb  6 01:18:24 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.d12
Mon Feb  6 01:18:24 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.d3 not found or empty.
input CaMgO_full_tmp_2368.d12 copied.
input CaMgO_full_tmp_2396.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.d12
input CaMgO_full_tmp_2358.d12 copied.
input CaMgO_full_tmp_2372.d12 copied.
input CaMgO_full_tmp_2375.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.d3 not found or empty.
input CaMgO_full_tmp_2397.d12 copied.
input CaMgO_full_tmp_2333.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.d3 not found or empty.
input CaMgO_full_tmp_2349.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.d3 not found or empty.
input CaMgO_full_tmp_2321.d12 copied.
input CaMgO_full_tmp_2347.d12 copied.
input CaMgO_full_tmp_2300.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.d3 not found or empty.
input CaMgO_full_tmp_2317.d12 copied.
input CaMgO_full_tmp_2352.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.d3 not found or empty.
input CaMgO_full_tmp_2399.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.d12
input CaMgO_full_tmp_2354.d12 copied.
input CaMgO_full_tmp_2398.d12 copied.
input CaMgO_full_tmp_2359.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.d12
input CaMgO_full_tmp_2344.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.d12
input CaMgO_full_tmp_2374.d12 copied.
input CaMgO_full_tmp_2331.d12 copied.
input CaMgO_full_tmp_2303.d12 copied.
input CaMgO_full_tmp_2377.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.d12
input CaMgO_full_tmp_2379.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.d12
input CaMgO_full_tmp_2335.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.d12
input CaMgO_full_tmp_2356.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_
input CaMgO_full_tmp_2365.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.gui
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_
input CaMgO_full_tmp_2383.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.gui
input CaMgO_full_tmp_2329.d12 copied.
input CaMgO_full_tmp_2393.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.gui
input CaMgO_full_tmp_2392.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.gui
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.gui
input CaMgO_full_tmp_2308.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.gui
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.d3 not found or empty.
input CaMgO_full_tmp_2376.d12 copied.
input CaMgO_full_tmp_2336.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.d12
input CaMgO_full_tmp_2306.d12 copied.
input CaMgO_full_tmp_2307.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.d3 not found or empty.
input CaMgO_full_tmp_2310.d12 copied.
input CaMgO_full_tmp_2381.d12 copied.
input CaMgO_full_tmp_2360.d12 copied.
input CaMgO_full_tmp_2341.d12 copied.
input CaMgO_full_tmp_2339.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.d3 not found or empty.
input CaMgO_full_tmp_2385.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.d3 not found or empty.
input CaMgO_full_tmp_2304.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.d3 not found or empty.
input CaMgO_full_tmp_2357.d12 copied.
input CaMgO_full_tmp_2338.d12 copied.
input CaMgO_full_tmp_2311.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.gui
input CaMgO_full_tmp_2362.d12 copied.
input CaMgO_full_tmp_2380.d12 copied.
input CaMgO_full_tmp_2324.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.d3 not found or empty.
input CaMgO_full_tmp_2378.d12 copied.
input CaMgO_full_tmp_2370.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.d3 not found or empty.
input CaMgO_full_tmp_2361.d12 copied.
input CaMgO_full_tmp_2332.d12 copied.
input CaMgO_full_tmp_2371.d12 copied.
input CaMgO_full_tmp_2348.d12 copied.
input CaMgO_full_tmp_2319.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.d3 not found or empty.
input CaMgO_full_tmp_2346.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.d3 not found or empty.
input CaMgO_full_tmp_2337.gui copied.
input CaMgO_full_tmp_2367.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.d3 not found or empty.
input CaMgO_full_tmp_2327.d12 copied.
input CaMgO_full_tmp_2351.d12 copied.
input CaMgO_full_tmp_2334.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.gui
input CaMgO_full_tmp_2395.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.d3 not found or empty.
input CaMgO_full_tmp_2386.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.d3 not found or empty.
input CaMgO_full_tmp_2343.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.d3 not found or empty.
input CaMgO_full_tmp_2387.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.d3 not found or empty.
input CaMgO_full_tmp_2366.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.d3 not found or empty.
input CaMgO_full_tmp_2382.d12 copied.
input CaMgO_full_tmp_2326.gui copied.
input CaMgO_full_tmp_2394.gui copied.
input CaMgO_full_tmp_2369.gui copied.
input CaMgO_full_tmp_2318.gui copied.
input CaMgO_full_tmp_2388.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.gui
input CaMgO_full_tmp_2320.gui copied.
input CaMgO_full_tmp_2350.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.gui
input CaMgO_full_tmp_2330.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.gui
input CaMgO_full_tmp_2314.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.gui
input CaMgO_full_tmp_2328.gui copied.
input CaMgO_full_tmp_2316.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.d3 not found or empty.
input CaMgO_full_tmp_2375.gui copied.
input CaMgO_full_tmp_2368.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.d3 not found or empty.
input CaMgO_full_tmp_2309.gui copied.
input CaMgO_full_tmp_2305.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.d3 not found or empty.
input CaMgO_full_tmp_2325.gui copied.
input CaMgO_full_tmp_2315.gui copied.
input CaMgO_full_tmp_2390.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.gui
input CaMgO_full_tmp_2340.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.gui
input CaMgO_full_tmp_2300.gui copied.
input CaMgO_full_tmp_2301.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.d12
input CaMgO_full_tmp_2358.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.POINTCHG not found or empty.
input CaMgO_full_tmp_2321.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.gui
input CaMgO_full_tmp_2354.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.gui
input CaMgO_full_tmp_2347.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.gui
input CaMgO_full_tmp_2359.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.gui
input CaMgO_full_tmp_2391.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.POINTCHG not found or empty.
input CaMgO_full_tmp_2398.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.POINTCHG not found or empty.
input CaMgO_full_tmp_2397.gui copied.
input CaMgO_full_tmp_2373.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.POINTCHG not found or empty.
input CaMgO_full_tmp_2396.gui copied.
input CaMgO_full_tmp_2355.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.d3 not found or empty.
input CaMgO_full_tmp_2345.d12 copied.
input CaMgO_full_tmp_2384.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.gui
input CaMgO_full_tmp_2344.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.gui
input CaMgO_full_tmp_2374.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.gui
input CaMgO_full_tmp_2331.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.gui
input CaMgO_full_tmp_2335.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.POINTCHG not found or empty.
input CaMgO_full_tmp_2377.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.gui
input CaMgO_full_tmp_2364.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.POINTCHG not found or empty.
input CaMgO_full_tmp_2317.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.gui
input CaMgO_full_tmp_2356.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.gui
input CaMgO_full_tmp_2307.gui copied.
input CaMgO_full_tmp_2336.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.POINTCHG not found or empty.
input CaMgO_full_tmp_2329.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.POINTCHG not found or empty.
input CaMgO_full_tmp_2379.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.POINTCHG not found or empty.
input CaMgO_full_tmp_2365.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.POINTCHG not found or empty.
input CaMgO_full_tmp_2308.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.gui
input CaMgO_full_tmp_2306.gui copied.
input CaMgO_full_tmp_2385.gui copied.
input CaMgO_full_tmp_2311.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.gui
input CaMgO_full_tmp_2376.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.gui
input CaMgO_full_tmp_2357.gui copied.
input CaMgO_full_tmp_2380.gui copied.
input CaMgO_full_tmp_2338.gui copied.
input CaMgO_full_tmp_2361.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.d3 not found or empty.
input CaMgO_full_tmp_2310.gui copied.
input CaMgO_full_tmp_2389.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.d3 not found or empty.
input CaMgO_full_tmp_2393.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.POINTCHG not found or empty.
input CaMgO_full_tmp_2383.gui copied.
input CaMgO_full_tmp_2324.gui copied.
input CaMgO_full_tmp_2304.gui copied.
input CaMgO_full_tmp_2399.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.d3 not found or empty.
input CaMgO_full_tmp_2346.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.POINTCHG not found or empty.
input CaMgO_full_tmp_2370.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.POINTCHG not found or empty.
input CaMgO_full_tmp_2371.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.d3 not found or empty.
input CaMgO_full_tmp_2362.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.d3 not found or empty.
input CaMgO_full_tmp_2327.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.POINTCHG not found or empty.
input CaMgO_full_tmp_2351.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.POINTCHG not found or empty.
input CaMgO_full_tmp_2386.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.POINTCHG not found or empty.
input CaMgO_full_tmp_2395.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.d3 not found or empty.
input CaMgO_full_tmp_2360.gui copied.
input CaMgO_full_tmp_2378.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.POINTCHG not found or empty.
input CaMgO_full_tmp_2349.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.POINTCHG not found or empty.
input CaMgO_full_tmp_2348.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.POINTCHG not found or empty.
input CaMgO_full_tmp_2343.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.POINTCHG not found or empty.
input CaMgO_full_tmp_2319.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.POINTCHG not found or empty.
input CaMgO_full_tmp_2339.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.gui
input CaMgO_full_tmp_2355.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.POINTCHG not found or empty.
input CaMgO_full_tmp_2384.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.POINTCHG not found or empty.
input CaMgO_full_tmp_2373.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.POINTCHG not found or empty.
input CaMgO_full_tmp_2345.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.POINTCHG not found or empty.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/fort.20
input CaMgO_full_tmp_2333.gui copied.
input CaMgO_full_tmp_2342.gui copied.
input CaMgO_full_tmp_2323.gui copied.
input CaMgO_full_tmp_2313.gui copied.
input CaMgO_full_tmp_2303.gui copied.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/fort.20
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.POINTCHG not found or empty.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/fort.20
input CaMgO_full_tmp_2322.gui copied.
input CaMgO_full_tmp_2363.gui copied.
input CaMgO_full_tmp_2352.gui copied.
input CaMgO_full_tmp_2381.gui copied.
input CaMgO_full_tmp_2391.gui copied.
input CaMgO_full_tmp_2341.gui copied.
input CaMgO_full_tmp_2332.gui copied.
input CaMgO_full_tmp_2364.gui copied.
input CaMgO_full_tmp_2382.gui copied.
input CaMgO_full_tmp_2312.gui copied.
input CaMgO_full_tmp_2372.gui copied.
input CaMgO_full_tmp_2392.gui copied.
input CaMgO_full_tmp_2353.gui copied.
input CaMgO_full_tmp_2302.gui copied.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/fort.20
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.POINTCHG not found or empty.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/fort.20
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.POINTCHG not found or empty.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/fort.20
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2322.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2379.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2352.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2380.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.ERROR
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2322
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2322.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2322_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.gui
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2379
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2379.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2379_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2335.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.ERROR
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2380
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2380.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2380_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2353.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2367.xyz
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2352
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2352.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2352_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2355.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2388.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2330.xyz
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2335
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2335.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2335_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.gui
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2353
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2353.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2353_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2340.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2397.xyz
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2367
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2367.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2367_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2355
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2355.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2355_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2339.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2333.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.ERROR
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2330
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2330.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2330_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2391.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2302.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2356.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2317.xyz
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2388
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2388.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2388_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2384.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2351.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2362.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.ERROR
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2340
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2340.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2340_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.gui
nid001850
<checkfile0>
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2391
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2391.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2391_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2356
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2356.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2356_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2320.xyz
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2302
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2302.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2302_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001850
<checkfile0>
nid001850
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2397
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2397.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2397_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2339
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2339.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2339_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2333
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2333.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2333_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2317
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2317.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2317_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2351
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2351.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2351_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2384
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2384.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2384_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2362
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2362.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2362_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001850
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_2320
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_2320.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2320_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2312_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2312.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2399_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2399.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2326_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2326.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2301_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2301.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2314_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2314.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2398_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2398.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2343_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2343.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2331_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2331.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2395_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2395.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2345_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2345.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2358_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2358.optstory/
mv: File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.ERROR
cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2378_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2378.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2390_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2390.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2307_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2307.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.xyz
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2310_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2310.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2332_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2332.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2375_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2375.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2336_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2336.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.f9
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2321_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2321.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2300_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2300.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.OPTINFO
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2359_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2359.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.HESSOPT
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2316_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2316.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2369_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2369.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2368_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2368.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.ERROR
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2303_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2303.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2365_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2365.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2361_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2361.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.ERROR
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2377_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2377.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.f98
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2386_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2386.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2304_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2304.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2354_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2354.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2392_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2392.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2381_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2381.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.gui
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2372_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2372.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2385_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2385.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2328_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2328.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2313_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2313.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2348_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2348.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.xyz
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2346_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2346.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.f9
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2389_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2389.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2383_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2383.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2323_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2323.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2387_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2387.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2350_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2350.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2373_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2373.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2341_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2341.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2308_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2308.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2338_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2338.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.f9
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2337_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2337.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2309_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2309.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.HESSOPT
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2325_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2325.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.f9
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2315_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2315.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2311_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2311.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2366_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2366.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2319_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2319.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.SCFLOG
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2349_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2349.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2334_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2334.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2363_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2363.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2370_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2370.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2342_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2342.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2364_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2364.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.OPTINFO
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2306_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2306.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2327_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2327.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2347_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2347.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2324_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2324.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2376_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2376.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2396_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2396.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2344_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2344.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2329_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2329.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2305_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2305.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.ERROR
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2357_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2357.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2394_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2394.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2382_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2382.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2393_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2393.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2318_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2318.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2360_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2360.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2374_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2374.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_2371_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_2371.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
