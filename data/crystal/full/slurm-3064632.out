Lmod has detected the following error: The following module(s) are unknown:
"epcc-job-env"

Please check the spelling or version number. Also try "module spider ..."
It is also possible your cache file is out-of-date; it may help to try:
  $ module --ignore-cache load "epcc-job-env"

Also make sure that all modulefiles written in TCL start with the string
#%Module




Warning: You have enabled access to software packages installed
by external parties on ARCHER2 or those that are not fully-supported.
The ARCHER2 CSE service does not test these packages. The service desk
will make reasonable efforts to assist with questions on the use of
these packages but some issues may not be able to be resolved by the
service and they may direct you to seek help from external parties.


printed output filename CaMgO_full_tmp_3311.out
printed output filename CaMgO_full_tmp_3304.out
printed output filename CaMgO_full_tmp_3322.out
printed output filename CaMgO_full_tmp_3292.out
printed output filename CaMgO_full_tmp_3335.out
printed output filename CaMgO_full_tmp_3328.out
printed output filename CaMgO_full_tmp_3345.out
printed output filename CaMgO_full_tmp_3299.out
printed output filename CaMgO_full_tmp_3289.out
printed output filename CaMgO_full_tmp_3374.out
printed output filename CaMgO_full_tmp_3317.out
printed output filename CaMgO_full_tmp_3339.out
printed output filename CaMgO_full_tmp_3343.out
printed output filename CaMgO_full_tmp_3293.out
printed output filename CaMgO_full_tmp_3338.out
printed output filename CaMgO_full_tmp_3361.out
printed output filename CaMgO_full_tmp_3326.out
printed output filename CaMgO_full_tmp_3305.out
printed output filename CaMgO_full_tmp_3336.out
printed output filename CaMgO_full_tmp_3282.out
printed output filename CaMgO_full_tmp_3342.out
printed output filename CaMgO_full_tmp_3344.out
printed output filename CaMgO_full_tmp_3347.out
printed output filename CaMgO_full_tmp_3327.out
printed output filename CaMgO_full_tmp_3303.out
printed output filename CaMgO_full_tmp_3276.out
printed output filename CaMgO_full_tmp_3370.out
printed output filename CaMgO_full_tmp_3318.out
printed output filename CaMgO_full_tmp_3319.out
printed output filename CaMgO_full_tmp_3316.out
printed output filename CaMgO_full_tmp_3369.out
printed output filename CaMgO_full_tmp_3349.out
printed output filename CaMgO_full_tmp_3331.out
printed output filename CaMgO_full_tmp_3333.out
printed output filename CaMgO_full_tmp_3350.out
printed output filename CaMgO_full_tmp_3375.out
printed output filename CaMgO_full_tmp_3302.out
printed output filename CaMgO_full_tmp_3364.out
printed output filename CaMgO_full_tmp_3301.out
printed output filename CaMgO_full_tmp_3294.out
printed output filename CaMgO_full_tmp_3321.out
printed output filename CaMgO_full_tmp_3329.out
printed output filename CaMgO_full_tmp_3353.out
printed output filename CaMgO_full_tmp_3332.out
printed output filename CaMgO_full_tmp_3284.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_
<script>
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_
</script>
</script>
DATE START:DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
<script>
Fri Feb 10 17:00:01 GMT 2023
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_
<script>
</script>
DATE START:<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:</script>
</script>
DATE START:DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_
</script>
DATE START:</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
<script>
<script>
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.out
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_
<script>
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.out
</script>
Fri Feb 10 17:00:01 GMT 2023
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.out
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_3279.out
printed output filename CaMgO_full_tmp_3348.out
printed output filename CaMgO_full_tmp_3277.out
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:printed output filename CaMgO_full_tmp_3378.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_3308.out
</script>
DATE START:</script>
Fri Feb 10 17:00:01 GMT 2023
DATE START:</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.out
<script>
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_
</script>
Fri Feb 10 17:00:01 GMT 2023
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:</script>
DATE START:<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_
printed output filename CaMgO_full_tmp_3330.out
Fri Feb 10 17:00:01 GMT 2023
printed output filename CaMgO_full_tmp_3323.out
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.out
<script>
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_
printed output filename CaMgO_full_tmp_3324.out
printed output filename CaMgO_full_tmp_3368.out
printed output filename CaMgO_full_tmp_3285.out
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.out
<script>
printed output filename CaMgO_full_tmp_3281.out
printed output filename CaMgO_full_tmp_3278.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.out
printed output filename CaMgO_full_tmp_3313.out
printed output filename CaMgO_full_tmp_3314.out
printed output filename CaMgO_full_tmp_3297.out
printed output filename CaMgO_full_tmp_3307.out
printed output filename CaMgO_full_tmp_3367.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.out
printed output filename CaMgO_full_tmp_3306.out
printed output filename CaMgO_full_tmp_3320.out
</script>
DATE START:printed output filename CaMgO_full_tmp_3325.out
printed output filename CaMgO_full_tmp_3373.out
printed output filename CaMgO_full_tmp_3288.out
printed output filename CaMgO_full_tmp_3309.out
printed output filename CaMgO_full_tmp_3371.out
printed output filename CaMgO_full_tmp_3295.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_3354.out
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
<script>
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.out
<script>
printed output filename CaMgO_full_tmp_3296.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_3340.out
printed output filename CaMgO_full_tmp_3363.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_3357.out
</script>
DATE START:</script>
printed output filename CaMgO_full_tmp_3366.out
DATE START:printed output filename CaMgO_full_tmp_3377.out
printed output filename CaMgO_full_tmp_3315.out
printed output filename CaMgO_full_tmp_3341.out
printed output filename CaMgO_full_tmp_3352.out
printed output filename CaMgO_full_tmp_3359.out
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_3310.out
printed output filename CaMgO_full_tmp_3280.out
printed output filename CaMgO_full_tmp_3365.out
printed output filename CaMgO_full_tmp_3283.out
printed output filename CaMgO_full_tmp_3362.out
printed output filename CaMgO_full_tmp_3360.out
printed output filename CaMgO_full_tmp_3300.out
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_3298.out
printed output filename CaMgO_full_tmp_3356.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_3346.out
Fri Feb 10 17:00:01 GMT 2023
printed output filename CaMgO_full_tmp_3334.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_3372.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.out
Fri Feb 10 17:00:01 GMT 2023
printed output filename CaMgO_full_tmp_3337.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_
printed output filename CaMgO_full_tmp_3351.out
printed output filename CaMgO_full_tmp_3376.out
printed output filename CaMgO_full_tmp_3358.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_3355.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_3275.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.out
Fri Feb 10 17:00:01 GMT 2023
printed output filename CaMgO_full_tmp_3312.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_
</script>
DATE START:<script>
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_
<script>
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_
</script>
DATE START:<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_
<script>
</script>
DATE START:</script>
DATE START:</script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_
DATE START:Fri Feb 10 17:00:01 GMT 2023
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.out
</script>
DATE START:</script>
DATE START:Fri Feb 10 17:00:01 GMT 2023
<script>
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_
</script>
DATE START:Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
</script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_
<script>
DATE START:</script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.out
Fri Feb 10 17:00:01 GMT 2023
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.out
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.out
</script>
DATE START:</script>
DATE START:<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_
Fri Feb 10 17:00:01 GMT 2023
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_
<script>
<script>
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_
<script>
</script>
</script>
DATE START:DATE START:</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.out
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.out
<script>
<script>
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_
<script>
Fri Feb 10 17:00:01 GMT 2023
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_
<script>
<script>
<script>
<script>
<script>
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
Fri Feb 10 17:00:01 GMT 2023
</script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_
</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.out
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.out
</script>
DATE START:DATE START:</script>
Fri Feb 10 17:00:01 GMT 2023
<script>
DATE START:</script>
</script>
DATE START:DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:</script>
Fri Feb 10 17:00:01 GMT 2023
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_
DATE START:Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_
Fri Feb 10 17:00:01 GMT 2023
<script>
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.out
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.out
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.out
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.out
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.out
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.out
Fri Feb 10 17:00:01 GMT 2023
Fri Feb 10 17:00:01 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.out
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.out
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_
<script>
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.out
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:<script>
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.out
Fri Feb 10 17:00:01 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.d12
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.d12
</script>
DATE START:Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.d12
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Fri Feb 10 17:00:01 GMT 2023
</script>
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.d12
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.d12
Fri Feb 10 17:00:01 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.d12
Fri Feb 10 17:00:01 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Fri Feb 10 17:00:01 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.d12
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_
input CaMgO_full_tmp_3316.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.d12
input CaMgO_full_tmp_3292.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_
input CaMgO_full_tmp_3333.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_
input CaMgO_full_tmp_3364.d12 copied.
input CaMgO_full_tmp_3335.d12 copied.
input CaMgO_full_tmp_3339.d12 copied.
input CaMgO_full_tmp_3321.d12 copied.
input CaMgO_full_tmp_3301.d12 copied.
input CaMgO_full_tmp_3347.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_
input CaMgO_full_tmp_3349.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_
input CaMgO_full_tmp_3369.d12 copied.
input CaMgO_full_tmp_3284.d12 copied.
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
input CaMgO_full_tmp_3375.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_
input CaMgO_full_tmp_3299.d12 copied.
input CaMgO_full_tmp_3293.d12 copied.
Fri Feb 10 17:00:01 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_
input CaMgO_full_tmp_3311.d12 copied.
</script>
input CaMgO_full_tmp_3305.d12 copied.
DATE START:input CaMgO_full_tmp_3350.d12 copied.
input CaMgO_full_tmp_3336.d12 copied.
input CaMgO_full_tmp_3282.d12 copied.
input CaMgO_full_tmp_3353.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.d12
input CaMgO_full_tmp_3326.d12 copied.
<script>
<script>
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.d12
input CaMgO_full_tmp_3342.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_
input CaMgO_full_tmp_3327.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_
Fri Feb 10 17:00:01 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:input CaMgO_full_tmp_3304.d12 copied.
</script>
DATE START:input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.d12
<script>
input CaMgO_full_tmp_3276.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_
input CaMgO_full_tmp_3322.d12 copied.
input CaMgO_full_tmp_3332.d12 copied.
<script>
input CaMgO_full_tmp_3344.d12 copied.
input CaMgO_full_tmp_3331.d12 copied.
input CaMgO_full_tmp_3303.d12 copied.
input CaMgO_full_tmp_3361.d12 copied.
input CaMgO_full_tmp_3318.d12 copied.
input CaMgO_full_tmp_3345.d12 copied.
input CaMgO_full_tmp_3289.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.d12
input CaMgO_full_tmp_3329.d12 copied.
Fri Feb 10 17:00:01 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.d12
Fri Feb 10 17:00:01 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.d12
</script>
DATE START:input CaMgO_full_tmp_3317.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.out
input CaMgO_full_tmp_3374.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
input CaMgO_full_tmp_3285.d12 copied.
</script>
DATE START:input CaMgO_full_tmp_3279.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.d12
input CaMgO_full_tmp_3330.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.d3 not found or empty.
input CaMgO_full_tmp_3319.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.d3 not found or empty.
input CaMgO_full_tmp_3324.d12 copied.
input CaMgO_full_tmp_3308.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.d12
input CaMgO_full_tmp_3348.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.d3 not found or empty.
input CaMgO_full_tmp_3343.d12 copied.
input CaMgO_full_tmp_3367.d12 copied.
Fri Feb 10 17:00:01 GMT 2023
input CaMgO_full_tmp_3325.d12 copied.
input CaMgO_full_tmp_3338.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.d3 not found or empty.
input CaMgO_full_tmp_3328.d12 copied.
input CaMgO_full_tmp_3323.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.d3 not found or empty.
input CaMgO_full_tmp_3377.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.d3 not found or empty.
input CaMgO_full_tmp_3362.d12 copied.
input CaMgO_full_tmp_3370.d12 copied.
Fri Feb 10 17:00:01 GMT 2023
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.out
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.d12
input CaMgO_full_tmp_3340.d12 copied.
input CaMgO_full_tmp_3297.d12 copied.
input CaMgO_full_tmp_3295.d12 copied.
input CaMgO_full_tmp_3359.d12 copied.
input CaMgO_full_tmp_3366.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.d12
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.out
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.d12
input CaMgO_full_tmp_3281.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.d12
input CaMgO_full_tmp_3310.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.d12
input CaMgO_full_tmp_3334.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.d12
input CaMgO_full_tmp_3309.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.d3 not found or empty.
input CaMgO_full_tmp_3315.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.d3 not found or empty.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.d12
input CaMgO_full_tmp_3357.d12 copied.
input CaMgO_full_tmp_3365.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.d12
input CaMgO_full_tmp_3341.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.d12
input CaMgO_full_tmp_3372.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.d3 not found or empty.
input CaMgO_full_tmp_3277.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.gui
input CaMgO_full_tmp_3300.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.gui
input CaMgO_full_tmp_3371.d12 copied.
input CaMgO_full_tmp_3337.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.d3 not found or empty.
input CaMgO_full_tmp_3294.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.gui
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_
input CaMgO_full_tmp_3298.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.gui
input CaMgO_full_tmp_3306.d12 copied.
input CaMgO_full_tmp_3278.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.gui
input CaMgO_full_tmp_3288.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.gui
input CaMgO_full_tmp_3275.d12 copied.
input CaMgO_full_tmp_3352.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.d12
input CaMgO_full_tmp_3360.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.d3 not found or empty.
input CaMgO_full_tmp_3356.d12 copied.
input CaMgO_full_tmp_3302.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.gui
input CaMgO_full_tmp_3314.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.d3 not found or empty.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.gui
input CaMgO_full_tmp_3346.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.gui
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_
input CaMgO_full_tmp_3312.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.d3 not found or empty.
input CaMgO_full_tmp_3296.d12 copied.
input CaMgO_full_tmp_3283.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.d3 not found or empty.
input CaMgO_full_tmp_3351.d12 copied.
input CaMgO_full_tmp_3333.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.d3 not found or empty.
input CaMgO_full_tmp_3313.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.gui
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.d3 not found or empty.
input CaMgO_full_tmp_3364.gui copied.
input CaMgO_full_tmp_3358.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.d3 not found or empty.
input CaMgO_full_tmp_3292.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.gui
input CaMgO_full_tmp_3339.gui copied.
input CaMgO_full_tmp_3316.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.d3 not found or empty.
input CaMgO_full_tmp_3376.d12 copied.
input CaMgO_full_tmp_3305.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.gui
input CaMgO_full_tmp_3368.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.d3 not found or empty.
input CaMgO_full_tmp_3284.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.gui
input CaMgO_full_tmp_3375.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.d12
input CaMgO_full_tmp_3369.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.d3 not found or empty.
input CaMgO_full_tmp_3282.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.d3 not found or empty.
input CaMgO_full_tmp_3327.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.gui
input CaMgO_full_tmp_3293.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.gui
input CaMgO_full_tmp_3342.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.d3 not found or empty.
input CaMgO_full_tmp_3299.gui copied.
input CaMgO_full_tmp_3335.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.d3 not found or empty.
input CaMgO_full_tmp_3317.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.gui
input CaMgO_full_tmp_3276.gui copied.
input CaMgO_full_tmp_3304.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.gui
input CaMgO_full_tmp_3332.gui copied.
input CaMgO_full_tmp_3355.d12 copied.
input CaMgO_full_tmp_3307.d12 copied.
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.d3 not found or empty.
input CaMgO_full_tmp_3322.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.gui
input CaMgO_full_tmp_3336.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.gui
input CaMgO_full_tmp_3345.gui copied.
input CaMgO_full_tmp_3349.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.d3 not found or empty.
input CaMgO_full_tmp_3340.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.POINTCHG not found or empty.
input CaMgO_full_tmp_3353.gui copied.
input CaMgO_full_tmp_3378.d12 copied.
input CaMgO_full_tmp_3285.gui copied.
input CaMgO_full_tmp_3319.gui copied.
input CaMgO_full_tmp_3343.gui copied.
input CaMgO_full_tmp_3331.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.POINTCHG not found or empty.
input CaMgO_full_tmp_3359.gui copied.
input CaMgO_full_tmp_3325.gui copied.
input CaMgO_full_tmp_3377.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.POINTCHG not found or empty.
input CaMgO_full_tmp_3328.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.gui
input CaMgO_full_tmp_3310.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.gui
input CaMgO_full_tmp_3370.gui copied.
input CaMgO_full_tmp_3347.gui copied.
input CaMgO_full_tmp_3311.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.POINTCHG not found or empty.
input CaMgO_full_tmp_3279.gui copied.
input CaMgO_full_tmp_3329.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.gui
input CaMgO_full_tmp_3323.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.POINTCHG not found or empty.
input CaMgO_full_tmp_3338.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.d12
input CaMgO_full_tmp_3361.gui copied.
input CaMgO_full_tmp_3324.gui copied.
input CaMgO_full_tmp_3318.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.POINTCHG not found or empty.
input CaMgO_full_tmp_3334.gui copied.
input CaMgO_full_tmp_3321.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.POINTCHG not found or empty.
input CaMgO_full_tmp_3320.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.gui
input CaMgO_full_tmp_3297.gui copied.
input CaMgO_full_tmp_3309.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.gui
input CaMgO_full_tmp_3372.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.gui
input CaMgO_full_tmp_3308.gui copied.
input CaMgO_full_tmp_3330.gui copied.
input CaMgO_full_tmp_3326.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.POINTCHG not found or empty.
input CaMgO_full_tmp_3341.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.gui
input CaMgO_full_tmp_3280.d12 copied.
input CaMgO_full_tmp_3348.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.POINTCHG not found or empty.
input CaMgO_full_tmp_3366.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.gui
input CaMgO_full_tmp_3373.d12 copied.
input CaMgO_full_tmp_3344.gui copied.
input CaMgO_full_tmp_3337.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.POINTCHG not found or empty.
input CaMgO_full_tmp_3365.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.d3 not found or empty.
input CaMgO_full_tmp_3350.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.POINTCHG not found or empty.
input CaMgO_full_tmp_3352.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.POINTCHG not found or empty.
input CaMgO_full_tmp_3295.gui copied.
input CaMgO_full_tmp_3281.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.gui
input CaMgO_full_tmp_3357.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.gui
input CaMgO_full_tmp_3363.d12 copied.
input CaMgO_full_tmp_3300.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.POINTCHG not found or empty.
input CaMgO_full_tmp_3294.gui copied.
input CaMgO_full_tmp_3371.gui copied.
input CaMgO_full_tmp_3315.gui copied.
input CaMgO_full_tmp_3362.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.POINTCHG not found or empty.
input CaMgO_full_tmp_3289.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.POINTCHG not found or empty.
input CaMgO_full_tmp_3314.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.d12
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.POINTCHG not found or empty.
input CaMgO_full_tmp_3351.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.POINTCHG not found or empty.
input CaMgO_full_tmp_3288.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.POINTCHG not found or empty.
input CaMgO_full_tmp_3298.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.POINTCHG not found or empty.
input CaMgO_full_tmp_3358.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.gui
input CaMgO_full_tmp_3360.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.POINTCHG not found or empty.
input CaMgO_full_tmp_3313.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.POINTCHG not found or empty.
input CaMgO_full_tmp_3376.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.d3 not found or empty.
input CaMgO_full_tmp_3302.gui copied.
input CaMgO_full_tmp_3306.gui copied.
input CaMgO_full_tmp_3278.gui copied.
input CaMgO_full_tmp_3301.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.POINTCHG not found or empty.
input CaMgO_full_tmp_3283.gui copied.
input CaMgO_full_tmp_3346.gui copied.
input CaMgO_full_tmp_3296.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.POINTCHG not found or empty.
input CaMgO_full_tmp_3368.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.POINTCHG not found or empty.
input CaMgO_full_tmp_3367.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.gui
input CaMgO_full_tmp_3277.gui copied.
input CaMgO_full_tmp_3312.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.POINTCHG not found or empty.
input CaMgO_full_tmp_3354.d12 copied.
input CaMgO_full_tmp_3356.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.POINTCHG not found or empty.
input CaMgO_full_tmp_3374.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.POINTCHG not found or empty.
input CaMgO_full_tmp_3303.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.gui
input CaMgO_full_tmp_3307.gui copied.
input CaMgO_full_tmp_3355.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.d3 not found or empty.
input CaMgO_full_tmp_3378.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.gui
input CaMgO_full_tmp_3373.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.POINTCHG not found or empty.
input CaMgO_full_tmp_3363.gui copied.
input CaMgO_full_tmp_3275.gui copied.
input CaMgO_full_tmp_3280.gui copied.
input CaMgO_full_tmp_3320.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.POINTCHG not found or empty.
input CaMgO_full_tmp_3354.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.POINTCHG not found or empty.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/fort.20
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3289_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3289.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3312_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3312.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.gui
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3319_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3319.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3294_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3294.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3358_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3358.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3299_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3299.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3300_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3300.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3367_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3367.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.f9
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3318_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3318.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.f98
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3316_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3316.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3356_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3356.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3349_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3349.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3281_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3281.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3342_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3342.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3368_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3368.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.f9
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3359_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3359.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3341_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3341.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3302_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3302.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.SCFLOG
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3365_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3365.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3329_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3329.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.SCFLOG
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3276_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3276.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.OPTINFO
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3308_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3308.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3285_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3285.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3330_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3330.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3293_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3293.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3303_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3303.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.f98
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.SCFLOG
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3345_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3345.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3317_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3317.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3292_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3292.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3283_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3283.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3346_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3346.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3352_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3352.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3336_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3336.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.xyz
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3374_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3374.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.ERROR
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3363_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3363.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3306_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3306.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3310_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3310.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3325_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3325.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3323_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3323.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3373_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3373.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3279_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3279.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.OPTINFO
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3366_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3366.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3378_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3378.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3339_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3339.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3315_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3315.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3376_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3376.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3362_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3362.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.ERROR
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3275_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3275.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3320_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3320.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.f98
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3360_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3360.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3280_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3280.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3377_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3377.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3304_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3304.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3314_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3314.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3357_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3357.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.SCFLOG
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3335_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3335.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3284_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3284.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3375_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3375.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3347_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3347.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.f9
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3328_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3328.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3327_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3327.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.HESSOPT
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3348_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3348.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3305_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3305.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.f9
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3324_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3324.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3370_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3370.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3295_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3295.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3296_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3296.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3351_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3351.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.f98
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3343_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3343.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3332_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3332.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.f98
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.gui
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3331_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3331.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.xyz
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3350_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3350.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3337_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3337.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.f9
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.gui
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3340_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3340.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.OPTINFO
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3364_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3364.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3309_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3309.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.f9
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3361_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3361.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3301_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3301.optstory/
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3311_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3311.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3338_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3338.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.f98
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3298_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3298.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.OPTINFO
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.xyz
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3371_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3371.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.OPTINFO
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3288_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3288.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3278_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3278.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3307_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3307.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3344_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3344.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3333_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3333.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.xyz
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3297_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3297.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.f9
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3334_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3334.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3313_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3313.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3282_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3282.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3355_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3355.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3321_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3321.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.ERROR
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3353_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3353.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3369_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3369.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3277_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3277.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3372_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3372.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3326_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3326.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3322_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3322.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_3354_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_3354.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
