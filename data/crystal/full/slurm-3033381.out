Lmod has detected the following error: The following module(s) are unknown:
"epcc-job-env"

Please check the spelling or version number. Also try "module spider ..."
It is also possible your cache file is out-of-date; it may help to try:
  $ module --ignore-cache load "epcc-job-env"

Also make sure that all modulefiles written in TCL start with the string
#%Module




Warning: You have enabled access to software packages installed
by external parties on ARCHER2 or those that are not fully-supported.
The ARCHER2 CSE service does not test these packages. The service desk
will make reasonable efforts to assist with questions on the use of
these packages but some issues may not be able to be resolved by the
service and they may direct you to seek help from external parties.


sacct: error: slurm_persist_conn_open: Something happened with the receiving/processing of the persistent connection init message to 10.252.2.5:6819: Unable to connect to database
sacct: error: Sending PersistInit msg: Unable to connect to database
sacct: error: Problem talking to the database: Unable to connect to database
sacct: error: slurm_persist_conn_open: Something happened with the receiving/processing of the persistent connection init message to 10.252.2.5:6819: Unable to connect to database
sacct: error: Sending PersistInit msg: Unable to connect to database
sacct: error: Problem talking to the database: Unable to connect to database
printed output filename CaMgO_full_tmp_768.out
printed output filename CaMgO_full_tmp_723.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_759.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_
<script>
printed output filename CaMgO_full_tmp_737.out
printed output filename CaMgO_full_tmp_756.out
printed output filename CaMgO_full_tmp_733.out
printed output filename CaMgO_full_tmp_782.out
printed output filename CaMgO_full_tmp_795.out
printed output filename CaMgO_full_tmp_716.out
printed output filename CaMgO_full_tmp_777.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_732.out
printed output filename CaMgO_full_tmp_728.out
printed output filename CaMgO_full_tmp_713.out
printed output filename CaMgO_full_tmp_765.out
printed output filename CaMgO_full_tmp_715.out
printed output filename CaMgO_full_tmp_727.out
printed output filename CaMgO_full_tmp_718.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
printed output filename CaMgO_full_tmp_736.out
printed output filename CaMgO_full_tmp_741.out
printed output filename CaMgO_full_tmp_758.out
printed output filename CaMgO_full_tmp_788.out
printed output filename CaMgO_full_tmp_705.out
Sun Feb  5 19:04:12 GMT 2023
</script>
DATE START:printed output filename CaMgO_full_tmp_784.out
printed output filename CaMgO_full_tmp_726.out
printed output filename CaMgO_full_tmp_707.out
printed output filename CaMgO_full_tmp_753.out
printed output filename CaMgO_full_tmp_739.out
printed output filename CaMgO_full_tmp_770.out
printed output filename CaMgO_full_tmp_710.out
printed output filename CaMgO_full_tmp_748.out
printed output filename CaMgO_full_tmp_704.out
printed output filename CaMgO_full_tmp_734.out
printed output filename CaMgO_full_tmp_779.out
printed output filename CaMgO_full_tmp_750.out
printed output filename CaMgO_full_tmp_752.out
printed output filename CaMgO_full_tmp_783.out
printed output filename CaMgO_full_tmp_769.out
printed output filename CaMgO_full_tmp_785.out
printed output filename CaMgO_full_tmp_776.out
printed output filename CaMgO_full_tmp_700.out
printed output filename CaMgO_full_tmp_780.out
printed output filename CaMgO_full_tmp_706.out
printed output filename CaMgO_full_tmp_772.out
printed output filename CaMgO_full_tmp_751.out
printed output filename CaMgO_full_tmp_711.out
printed output filename CaMgO_full_tmp_773.out
printed output filename CaMgO_full_tmp_747.out
printed output filename CaMgO_full_tmp_789.out
printed output filename CaMgO_full_tmp_794.out
printed output filename CaMgO_full_tmp_720.out
printed output filename CaMgO_full_tmp_766.out
printed output filename CaMgO_full_tmp_796.out
printed output filename CaMgO_full_tmp_702.out
printed output filename CaMgO_full_tmp_724.out
printed output filename CaMgO_full_tmp_749.out
printed output filename CaMgO_full_tmp_763.out
printed output filename CaMgO_full_tmp_781.out
printed output filename CaMgO_full_tmp_730.out
printed output filename CaMgO_full_tmp_790.out
printed output filename CaMgO_full_tmp_745.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_
printed output filename CaMgO_full_tmp_760.out
printed output filename CaMgO_full_tmp_721.out
printed output filename CaMgO_full_tmp_731.out
printed output filename CaMgO_full_tmp_762.out
printed output filename CaMgO_full_tmp_735.out
printed output filename CaMgO_full_tmp_712.out
printed output filename CaMgO_full_tmp_764.out
printed output filename CaMgO_full_tmp_792.out
printed output filename CaMgO_full_tmp_738.out
printed output filename CaMgO_full_tmp_757.out
printed output filename CaMgO_full_tmp_775.out
printed output filename CaMgO_full_tmp_729.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_798.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
printed output filename CaMgO_full_tmp_743.out
printed output filename CaMgO_full_tmp_754.out
printed output filename CaMgO_full_tmp_703.out
printed output filename CaMgO_full_tmp_787.out
printed output filename CaMgO_full_tmp_786.out
printed output filename CaMgO_full_tmp_744.out
printed output filename CaMgO_full_tmp_725.out
printed output filename CaMgO_full_tmp_740.out
printed output filename CaMgO_full_tmp_719.out
printed output filename CaMgO_full_tmp_717.out
printed output filename CaMgO_full_tmp_709.out
printed output filename CaMgO_full_tmp_797.out
Sun Feb  5 19:04:12 GMT 2023
printed output filename CaMgO_full_tmp_774.out
printed output filename CaMgO_full_tmp_755.out
printed output filename CaMgO_full_tmp_708.out
printed output filename CaMgO_full_tmp_767.out
printed output filename CaMgO_full_tmp_722.out
printed output filename CaMgO_full_tmp_771.out
printed output filename CaMgO_full_tmp_793.out
printed output filename CaMgO_full_tmp_791.out
printed output filename CaMgO_full_tmp_799.out
printed output filename CaMgO_full_tmp_742.out
printed output filename CaMgO_full_tmp_761.out
printed output filename CaMgO_full_tmp_778.out
printed output filename CaMgO_full_tmp_746.out
printed output filename CaMgO_full_tmp_701.out
printed output filename CaMgO_full_tmp_714.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.out
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
<script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_
</script>
DATE START:srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.out
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_
Sun Feb  5 19:04:12 GMT 2023
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_
DATE START:<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_
<script>
Sun Feb  5 19:04:12 GMT 2023
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
</script>
</script>
DATE START:DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_
</script>
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_
srun --nodes=1 --ntasks=128 --hint=nomultithread --distribution=block:block
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_
<script>
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:<script>
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_
DATE START:</script>
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.out
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.out
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.out
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_
<script>
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_
DATE START:Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_
</script>
</script>
DATE START:DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.out
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_
Sun Feb  5 19:04:12 GMT 2023
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.out
</script>
DATE START:</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_
Sun Feb  5 19:04:12 GMT 2023
</script>
<script>
<script>
DATE START:Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.out
<script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.out
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.out
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_
Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.out
</script>
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_
DATE START:Sun Feb  5 19:04:12 GMT 2023
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.out
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.out
creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
DATE START:creating temporary directory /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_
<script>
<script>
<script>
<script>
<script>
<script>
<script>
<script>
<script>
Sun Feb  5 19:04:12 GMT 2023
<script>
<script>
<script>
Sun Feb  5 19:04:12 GMT 2023
<script>
<script>
<script>
Sun Feb  5 19:04:12 GMT 2023
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.out
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.out
<script>
<script>
<script>
</script>
DATE START:<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_
<script>
<script>
<script>
<script>
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_
<script>
<script>
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_
</script>
<script>
DATE START:Sun Feb  5 19:04:12 GMT 2023
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
<script>
<script>
<script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
DATE START:</script>
</script>
DATE START:DATE START:<script>
<script>
</script>
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.out
DATE START:DATE START:</script>
<script>
</script>
<script>
<script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:<script>
<script>
<script>
<script>
<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
<script>
DATE START:<script>
<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:</script>
<script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:<script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
</script>
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:DATE START:DATE START:</script>
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_
Sun Feb  5 19:04:12 GMT 2023
DATE START:DATE START:Sun Feb  5 19:04:12 GMT 2023
</script>
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:DATE START:</script>
DATE START:</script>
DATE START:Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_
</script>
</script>
Sun Feb  5 19:04:12 GMT 2023
DATE START:DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
</script>
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.out
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.out
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.out
Sun Feb  5 19:04:12 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_
Sun Feb  5 19:04:12 GMT 2023
</script>
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.out
DATE START:output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.out
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
DATE START:# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
</script>
Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
DATE START:</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.out
</script>
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.out
</script>
DATE START:Sun Feb  5 19:04:12 GMT 2023
# Generate basic information of output file

OUTDIR=`pwd`
INPDIR=`pwd`

echo "output file: ${OUTDIR}/${OUTPUT}"
cat << EOF > ${OUTDIR}/${OUTPUT}
date:                `date`
hostname:            `hostname`
system:              `uname -a`
user:                `whoami`
input:               ${OUTDIR}/${JOBNAME}.d12
output:              ${OUTDIR}/${OUTPUT}
executable script:   $0
executable:          ${CRYSTAL_TYPE}
Command:             ${CRYCOMMAND}
Slurm JobID:         ${JOBID}
temporary directory: ${JOBTMPDIR}      
EOF

if [[ ! -z ${JOBID} ]]; then
    echo "<squeue -j ${JOBID}>"  >> ${OUTDIR}/${OUTPUT}
    squeue -j ${JOBID}           >> ${OUTDIR}/${OUTPUT} 2>&1
    echo "</squeue -j ${JOBID}>" >> ${OUTDIR}/${OUTPUT}
fi

echo "temporary directory: ${JOBTMPDIR}"

# Prepare input files

## Read list

LINE_PRECALC=`grep -nw 'PRE_CALC' ${SETFILE}`
LINE_PRECALC=`echo "scale=0;${LINE_PRECALC%%:*}+4" | bc`

SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`

## Mandatory files

### d12 and d3

if [[ -e ${INPDIR}/${JOBNAME}.d3 && -s ${INPDIR}/${JOBNAME}.d3 ]]; then
    echo "Error: Properties calculation input identified. Remove it before continuing."
    echo "Exit without calculation."
    exit
fi

while [[ ${TMP_NAME} != 'RESTART' ]]; do
    if [[ -e ${INPDIR}/${JOBNAME}${SAVED_NAME} && -s ${INPDIR}/${JOBNAME}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

        echo "input expected in ${INPDIR}/${JOBNAME}${SAVED_NAME}"
        echo "input data ${INPDIR}/${JOBNAME}${SAVED_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
        if [[ ${SAVED_NAME} == '.d12' ]]; then
            cat ${INPDIR}/${JOBNAME}${SAVED_NAME} >> ${OUTDIR}/${OUTPUT} 2>&1
        fi
        cp ${INPDIR}/${JOBNAME}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
        echo "input ${JOBNAME}${SAVED_NAME} copied."
    else
        echo "Input data ${INPDIR}/${JOBNAME}${SAVED_NAME} not found or empty."
    fi

    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
done

## Restart files

if [[ $# > 1 ]]; then
    PRE_JOB=`echo $2`
    LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
    SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${INPDIR}/${PRE_JOB}${SAVED_NAME} && -s ${INPDIR}/${PRE_JOB}${SAVED_NAME} ]]; then

### Copy files to the main temporary directory

            cp ${INPDIR}/${PRE_JOB}${SAVED_NAME} ${JOBTMPDIR}/${TMP_NAME}
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" >> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File found: ${INPDIR}/${PRE_JOB}${SAVED_NAME}, temporarily saved as ${JOBTMPDIR}/${TMP_NAME}" 
        fi

        LINE_PRECALC=`echo "scale=0;${LINE_PRECALC}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_PRECALC}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

# Launch calculations

cd ${JOBTMPDIR}
${CRYCOMMAND} >> ${OUTDIR}/${OUTPUT} 2>&1

# HERE
# Restore variables - kept same as job submission script
JOBTYPE='crys'
#OUTDIR=`pwd`
#OUTPUT=${JOBNAME}.out
#JOBTMPDIR=`pwd`
#JOBTMPDIR=${JOBTMPDIR}/tmp_${JOBNAME}_${JOBID}

cd ${JOBTMPDIR}

echo -n "end_date " >> ${OUTDIR}/${OUTPUT}
date >> ${OUTDIR}/${OUTPUT}

#tag_start_for_checkfile

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#tag_end_for_checkfile

if [[ ! -z ${MASTER_WITH_PROC_0} ]]; then
    touch ${JOBTMPDIR}/checkfile0
else
    ### start checkfile ###
    cat << EOF > ${JOBTMPDIR}/checkfile0
#!/bin/bash
JOBNAME=${JOBNAME}
OUTDIR=${OUTDIR}
OUTPUT=${OUTPUT}
JOBTMPDIR=${JOBTMPDIR}
cd  ${JOBTMPDIR}
EOF
    sed '1,/^#tag_s/d;/^#tag_e/,$d'  $0 >> ${JOBTMPDIR}/checkfile0
    chmod 755 ${JOBTMPDIR}/checkfile0
    hostname
    echo '<checkfile0>'
    cat ${JOBTMPDIR}/checkfile0
    echo '</checkfile0>'
    ### end checkfile ###
fi

# Remove temporary directory

cd ${OUTDIR}
mv slurm-${JOBID}.out ${JOBNAME}.log
rm -fr ${JOBTMPDIR}
exit
</script>
</script>
DATE START:</script>
DATE START:Sun Feb  5 19:04:12 GMT 2023
</script>
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
DATE START:Sun Feb  5 19:04:12 GMT 2023
</script>
DATE START:DATE START:DATE START:</script>
DATE START:DATE START:Sun Feb  5 19:04:12 GMT 2023
DATE START:DATE START:Sun Feb  5 19:04:12 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.out
Sun Feb  5 19:04:12 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.out
Sun Feb  5 19:04:12 GMT 2023
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.out
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.out
Sun Feb  5 19:04:12 GMT 2023
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.out
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_
output file: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.out
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.d12
temporary directory: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.d12
input CaMgO_full_tmp_751.d12 copied.
input CaMgO_full_tmp_789.d12 copied.
input CaMgO_full_tmp_737.d12 copied.
input CaMgO_full_tmp_777.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.d12
input CaMgO_full_tmp_765.d12 copied.
input CaMgO_full_tmp_759.d12 copied.
input CaMgO_full_tmp_748.d12 copied.
input CaMgO_full_tmp_782.d12 copied.
input CaMgO_full_tmp_721.d12 copied.
input CaMgO_full_tmp_716.d12 copied.
input CaMgO_full_tmp_739.d12 copied.
input CaMgO_full_tmp_756.d12 copied.
input CaMgO_full_tmp_788.d12 copied.
input CaMgO_full_tmp_769.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.d12
input CaMgO_full_tmp_778.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.d12
input CaMgO_full_tmp_776.d12 copied.
input CaMgO_full_tmp_733.d12 copied.
input CaMgO_full_tmp_728.d12 copied.
input CaMgO_full_tmp_768.d12 copied.
input CaMgO_full_tmp_715.d12 copied.
input CaMgO_full_tmp_753.d12 copied.
input CaMgO_full_tmp_724.d12 copied.
input CaMgO_full_tmp_705.d12 copied.
input CaMgO_full_tmp_732.d12 copied.
input CaMgO_full_tmp_723.d12 copied.
input CaMgO_full_tmp_784.d12 copied.
input CaMgO_full_tmp_773.d12 copied.
input CaMgO_full_tmp_795.d12 copied.
input CaMgO_full_tmp_743.d12 copied.
input CaMgO_full_tmp_790.d12 copied.
input CaMgO_full_tmp_758.d12 copied.
input CaMgO_full_tmp_747.d12 copied.
input CaMgO_full_tmp_741.d12 copied.
input CaMgO_full_tmp_762.d12 copied.
input CaMgO_full_tmp_725.d12 copied.
input CaMgO_full_tmp_787.d12 copied.
input CaMgO_full_tmp_729.d12 copied.
input CaMgO_full_tmp_713.d12 copied.
input CaMgO_full_tmp_799.d12 copied.
input CaMgO_full_tmp_704.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.d12
input CaMgO_full_tmp_763.d12 copied.
input CaMgO_full_tmp_793.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.d12
input CaMgO_full_tmp_712.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.d12
input CaMgO_full_tmp_710.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.d12
input CaMgO_full_tmp_779.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.d12
input CaMgO_full_tmp_774.d12 copied.
input CaMgO_full_tmp_744.d12 copied.
input CaMgO_full_tmp_783.d12 copied.
input CaMgO_full_tmp_722.d12 copied.
input CaMgO_full_tmp_794.d12 copied.
input CaMgO_full_tmp_791.d12 copied.
input CaMgO_full_tmp_798.d12 copied.
input CaMgO_full_tmp_711.d12 copied.
input CaMgO_full_tmp_772.d12 copied.
input CaMgO_full_tmp_702.d12 copied.
input CaMgO_full_tmp_771.d12 copied.
input CaMgO_full_tmp_734.d12 copied.
input CaMgO_full_tmp_767.d12 copied.
input CaMgO_full_tmp_780.d12 copied.
input CaMgO_full_tmp_761.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.d12
input CaMgO_full_tmp_735.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.d12
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.d12
input CaMgO_full_tmp_731.d12 copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.d12
input CaMgO_full_tmp_766.d12 copied.
input CaMgO_full_tmp_757.d12 copied.
input CaMgO_full_tmp_750.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.d12
input CaMgO_full_tmp_727.d12 copied.
input CaMgO_full_tmp_764.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.d3 not found or empty.
input CaMgO_full_tmp_742.d12 copied.
input CaMgO_full_tmp_717.d12 copied.
input CaMgO_full_tmp_706.d12 copied.
input CaMgO_full_tmp_730.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.d3 not found or empty.
input CaMgO_full_tmp_700.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.d3 not found or empty.
input CaMgO_full_tmp_708.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.d3 not found or empty.
input CaMgO_full_tmp_775.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.d3 not found or empty.
input CaMgO_full_tmp_745.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.d3 not found or empty.
input CaMgO_full_tmp_746.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.d3 not found or empty.
input CaMgO_full_tmp_796.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.d3 not found or empty.
input CaMgO_full_tmp_785.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.d3 not found or empty.
input CaMgO_full_tmp_714.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.d3 not found or empty.
input CaMgO_full_tmp_786.d12 copied.
input CaMgO_full_tmp_760.d12 copied.
input CaMgO_full_tmp_709.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.d3 not found or empty.
input CaMgO_full_tmp_738.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.d3 not found or empty.
input CaMgO_full_tmp_726.d12 copied.
input CaMgO_full_tmp_754.d12 copied.
input CaMgO_full_tmp_770.d12 copied.
input CaMgO_full_tmp_749.d12 copied.
input CaMgO_full_tmp_736.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.d3 not found or empty.
input CaMgO_full_tmp_720.d12 copied.
input CaMgO_full_tmp_755.d12 copied.
input CaMgO_full_tmp_792.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.d3 not found or empty.
input CaMgO_full_tmp_719.d12 copied.
input CaMgO_full_tmp_701.d12 copied.
input CaMgO_full_tmp_797.d12 copied.
input CaMgO_full_tmp_707.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.d3 not found or empty.
input CaMgO_full_tmp_718.d12 copied.
input CaMgO_full_tmp_752.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.d3 not found or empty.
input CaMgO_full_tmp_740.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.d3 not found or empty.
input CaMgO_full_tmp_781.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.d3 not found or empty.
input CaMgO_full_tmp_703.d12 copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.gui
input CaMgO_full_tmp_751.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.d3 not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.gui
input CaMgO_full_tmp_737.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.gui
input CaMgO_full_tmp_776.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.d3 not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.gui
input CaMgO_full_tmp_728.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.gui
input CaMgO_full_tmp_788.gui copied.
input CaMgO_full_tmp_743.gui copied.
input CaMgO_full_tmp_748.gui copied.
input CaMgO_full_tmp_795.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.gui
input CaMgO_full_tmp_725.gui copied.
input CaMgO_full_tmp_778.gui copied.
input CaMgO_full_tmp_784.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.gui
input CaMgO_full_tmp_715.gui copied.
input CaMgO_full_tmp_777.gui copied.
input CaMgO_full_tmp_758.gui copied.
input CaMgO_full_tmp_723.gui copied.
input CaMgO_full_tmp_741.gui copied.
input CaMgO_full_tmp_773.gui copied.
input CaMgO_full_tmp_756.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.gui
input CaMgO_full_tmp_791.gui copied.
input CaMgO_full_tmp_761.gui copied.
input CaMgO_full_tmp_704.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.gui
input CaMgO_full_tmp_771.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.gui
input CaMgO_full_tmp_789.gui copied.
input CaMgO_full_tmp_759.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.gui
input CaMgO_full_tmp_768.gui copied.
input CaMgO_full_tmp_790.gui copied.
input CaMgO_full_tmp_766.gui copied.
input CaMgO_full_tmp_799.gui copied.
input CaMgO_full_tmp_705.gui copied.
input CaMgO_full_tmp_716.gui copied.
input CaMgO_full_tmp_774.gui copied.
input CaMgO_full_tmp_744.gui copied.
input CaMgO_full_tmp_780.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.gui
input CaMgO_full_tmp_794.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.gui
input CaMgO_full_tmp_734.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.gui
input CaMgO_full_tmp_729.gui copied.
input CaMgO_full_tmp_767.gui copied.
input CaMgO_full_tmp_747.gui copied.
input CaMgO_full_tmp_798.gui copied.
input CaMgO_full_tmp_712.gui copied.
input CaMgO_full_tmp_731.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.gui
input CaMgO_full_tmp_783.gui copied.
input CaMgO_full_tmp_793.gui copied.
input CaMgO_full_tmp_763.gui copied.
input CaMgO_full_tmp_753.gui copied.
input CaMgO_full_tmp_757.gui copied.
input CaMgO_full_tmp_733.gui copied.
input CaMgO_full_tmp_769.gui copied.
input CaMgO_full_tmp_739.gui copied.
input CaMgO_full_tmp_750.gui copied.
input CaMgO_full_tmp_722.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.gui
input CaMgO_full_tmp_764.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.gui
input CaMgO_full_tmp_730.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.gui
input CaMgO_full_tmp_787.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.gui
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.POINTCHG not found or empty.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.gui
input CaMgO_full_tmp_745.gui copied.
input CaMgO_full_tmp_710.gui copied.
input CaMgO_full_tmp_746.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.gui
input CaMgO_full_tmp_721.gui copied.
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.gui
input expected in /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.gui
input CaMgO_full_tmp_779.gui copied.
input CaMgO_full_tmp_711.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.POINTCHG not found or empty.
input CaMgO_full_tmp_707.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.POINTCHG not found or empty.
input CaMgO_full_tmp_796.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.POINTCHG not found or empty.
input CaMgO_full_tmp_770.gui copied.
input CaMgO_full_tmp_754.gui copied.
input CaMgO_full_tmp_708.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.POINTCHG not found or empty.
input CaMgO_full_tmp_785.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.POINTCHG not found or empty.
input CaMgO_full_tmp_760.gui copied.
input CaMgO_full_tmp_786.gui copied.
input CaMgO_full_tmp_797.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.POINTCHG not found or empty.
input CaMgO_full_tmp_749.gui copied.
input CaMgO_full_tmp_718.gui copied.
input CaMgO_full_tmp_719.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.POINTCHG not found or empty.
input CaMgO_full_tmp_717.gui copied.
input CaMgO_full_tmp_727.gui copied.
input CaMgO_full_tmp_740.gui copied.
input CaMgO_full_tmp_700.gui copied.
input CaMgO_full_tmp_738.gui copied.
input CaMgO_full_tmp_775.gui copied.
input CaMgO_full_tmp_709.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.POINTCHG not found or empty.
input CaMgO_full_tmp_755.gui copied.
input CaMgO_full_tmp_781.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.POINTCHG not found or empty.
input CaMgO_full_tmp_736.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.POINTCHG not found or empty.
input CaMgO_full_tmp_726.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.POINTCHG not found or empty.
input CaMgO_full_tmp_706.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.POINTCHG not found or empty.
input CaMgO_full_tmp_703.gui copied.
input CaMgO_full_tmp_720.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.POINTCHG not found or empty.
input CaMgO_full_tmp_714.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.POINTCHG not found or empty.
input CaMgO_full_tmp_701.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.POINTCHG not found or empty.
input CaMgO_full_tmp_742.gui copied.
input CaMgO_full_tmp_724.gui copied.
input CaMgO_full_tmp_713.gui copied.
input CaMgO_full_tmp_702.gui copied.
input CaMgO_full_tmp_782.gui copied.
input CaMgO_full_tmp_772.gui copied.
input CaMgO_full_tmp_732.gui copied.
input CaMgO_full_tmp_752.gui copied.
input CaMgO_full_tmp_792.gui copied.
input CaMgO_full_tmp_762.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.POINTCHG not found or empty.
input CaMgO_full_tmp_765.gui copied.
input CaMgO_full_tmp_735.gui copied.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.POINTCHG not found or empty.
Input data /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.POINTCHG not found or empty.
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/fort.20
File found: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.f9, temporarily saved as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.20
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_723.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_750.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.gui
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_723
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_723.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_723_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_741.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_706.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_791.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_727.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_793.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_792.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_719.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_736.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_765.xyz
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_750
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_750.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_750_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_761.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_782.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_755.xyz
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_741
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_741.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_741_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_796.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_743.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_740.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_718.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_768.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_704.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_767.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_731.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_757.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_783.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_745.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_735.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_701.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_754.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_747.gui
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_706
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_706.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_706_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_780.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_703.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_798.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_779.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_790.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_713.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_787.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_794.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_725.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_742.xyz
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_791
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_791.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_791_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_782
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_782.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_782_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_727
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_727.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_727_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_792
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_792.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_792_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_783
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_783.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_783_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_711.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.gui
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_755
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_755.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_755_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001487
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_720.xyz
#!/bin/bash
JOBNAME=CaMgO_full_tmp_793
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_793.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_793_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_765
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_765.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_765_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_743
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_743.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_743_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.gui
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_761
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_761.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_761_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001487
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_719
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_719.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_719_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_714.xyz
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_796
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_796.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_796_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_736
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_736.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_736_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_740
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_740.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_740_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_779
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_779.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_779_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_768
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_768.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_768_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_735
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_735.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_735_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_780
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_780.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_780_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_747
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_747.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_747_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_731
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_731.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_731_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
nid001487
#!/bin/bash
JOBNAME=CaMgO_full_tmp_790
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_790.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_790_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

<checkfile0>
</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_767
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_767.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_767_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_725
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_725.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_725_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_742
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_742.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_742_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

#!/bin/bash
JOBNAME=CaMgO_full_tmp_704
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_704.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_704_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_754
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_754.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_754_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_718
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_718.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_718_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_757
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_757.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_757_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_745
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_745.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_745_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
nid001487
<checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
#!/bin/bash
JOBNAME=CaMgO_full_tmp_720
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_720.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_720_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_701
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_701.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_701_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_703
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_703.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_703_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_798
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_798.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_798_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.ERROR
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_787
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_787.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_787_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_711
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_711.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_711_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.gui
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_794
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_794.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_794_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out'nid001487
: No such file or directory
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_713
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_713.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_713_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_753.xyz
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_714
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_714.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_714_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
nid001487
<checkfile0>
#!/bin/bash
JOBNAME=CaMgO_full_tmp_753
OUTDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt
OUTPUT=CaMgO_full_tmp_753.out
JOBTMPDIR=/mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_
cd  /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_753_

## Cat error report to outputs

ls ERROR* > /dev/null 2>&1
if [[ $? == 0 ]]; then
    head ERROR*
    head ERROR* >> ${OUTDIR}/${OUTPUT}
fi

echo " "                                         >> ${OUTDIR}/${OUTPUT}
echo "TEMPORARY          SAVED (in ${OUTDIR})"   >> ${OUTDIR}/${OUTPUT}

## Most important one - fort.9

if [[ -e ${JOBTMPDIR}/fort.9 && -s ${JOBTMPDIR}/fort.9 ]]; then
    MASTER_WITH_PROC_0="YES"
else
    echo 'binary wf (fort.9) is not written on this node' >> ${OUTDIR}/${OUTPUT}
fi

## Read Crystal list

if [[ ${JOBTYPE} == 'crys' ]]; then
    LINE_POSTCRYS=`grep -nw 'POST_CRYS' ${SETFILE}`
    LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"

### Optimisation and scanmode

        elif [[ ${TMP_NAME: -1} == '*' ]]; then
            ls ${JOBTMPDIR}/${TMP_NAME} > /dev/null 2>&1
            if [[ $? == 0 ]]; then
                mkdir ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
                echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
                echo "Files saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
            fi
        fi
        LINE_POSTCRYS=`echo "scale=0;${LINE_POSTCRYS}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTCRYS}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Read Properties list

if [[ ${JOBTYPE} == 'prop' ]]; then
    LINE_POSTPROP=`grep -nw 'POST_PROP' ${SETFILE}`
    LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP%%:*}+4" | bc`

    SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
    TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`

    while [[ ! -z ${TMP_NAME} ]]; do
        if [[ -e ${JOBTMPDIR}/${TMP_NAME} && -s ${JOBTMPDIR}/${TMP_NAME} ]]; then
            cp ${JOBTMPDIR}/${TMP_NAME} ${OUTDIR}/${JOBNAME}${SAVED_NAME}
            echo ${TMP_NAME} ${JOBNAME}${SAVED_NAME} | awk '{printf("%-18s %-18s"),$1,$2}' >> ${OUTDIR}/${OUTPUT} 2>&1
            ls -l ${OUTDIR}/${JOBNAME}${SAVED_NAME} | awk '{printf("%-8s %s %s %s\n"),$5,$6,$7,$8}'>> ${OUTDIR}/${OUTPUT} 2>&1
            echo "File saved: ${JOBTMPDIR}/${TMP_NAME} as ${OUTDIR}/${JOBNAME}${SAVED_NAME}"
        fi
        LINE_POSTPROP=`echo "scale=0;${LINE_POSTPROP}+1" | bc`
        SAVED_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $1)}' ${SETFILE} | sed 's/.\{7\}//'`
        TMP_NAME=`awk 'NR=="'${LINE_POSTPROP}'"{printf("%s", $2)}' ${SETFILE}`
    done
fi

## Calculation summary

echo " "                 >> ${OUTDIR}/${OUTPUT}
echo -n "Disk usage:"    >> ${OUTDIR}/${OUTPUT} 2>&1
# ls -l  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "<du -m>"           >> ${OUTDIR}/${OUTPUT}
du -m  ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1
echo "</du -m>"          >> ${OUTDIR}/${OUTPUT}
df .   ${JOBTMPDIR}      >> ${OUTDIR}/${OUTPUT} 2>&1

</checkfile0>
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_733_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_733.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_721_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_721.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_715_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_715.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_734_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_734.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_728_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_728.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_726_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_726.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_732_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_732.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_739_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_739.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_770_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_770.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_756_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_756.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_778_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_778.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_746_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_746.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_749_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_749.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_748_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_748.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_759_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_759.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_781_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_781.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_707_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_707.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_762_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_762.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_722_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_722.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_760_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_760.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_766_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_766.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_716_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_716.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_774_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_774.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_708_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_708.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_772_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_772.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_752_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_752.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_776_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_776.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_789_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_789.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_700_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_700.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_705_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_705.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_751_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_751.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_744_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_744.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_729_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_729.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_786_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_786.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_737_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_737.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_717_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_717.optstory/
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_788_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_788.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.HESSOPT
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_710_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_710.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_795_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_795.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_771_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_771.optstory/
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_758_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_758.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_797_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_797.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_724_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_724.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_702_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_702.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_764_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_764.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.ERROR
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_730_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_730.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.gui
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_785_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_785.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.HESSOPT
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.gui
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_773_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_773.optstory/
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.xyz
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_799_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_799.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_784_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_784.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_777_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_777.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_709_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_709.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_712_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_712.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_769_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_769.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_763_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_763.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_775_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_775.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/fort.87 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.ERROR
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/fort.34 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.gui
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/fort.33 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.xyz
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/fort.9 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.f9
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/fort.98 as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.f98
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/SCFOUT.LOG as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.SCFLOG
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/OPTINFO.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.OPTINFO
File saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/HESSOPT.DAT as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.HESSOPT
Files saved: /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/tmp_CaMgO_full_tmp_738_/opt* as /mnt/lustre/a2fs-work2/work/e05/e05/bcamino/descriptors/full_opt/CaMgO_full_tmp_738.optstory/
mv: cannot stat 'slurm-.out': No such file or directory
